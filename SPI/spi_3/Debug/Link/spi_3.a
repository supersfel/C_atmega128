;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;	data -> R17
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;	*TextString -> R16,R17
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;void Init_Timer2(void)
; 0000 001B {
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 001C 
; 0000 001D TCCR2 = 0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 001E TCCR2 |= (1<<WGM21);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 001F OCR2=100;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0020 TIMSK = (1<<OCIE2);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0021 TCCR2|= 1<<CS21;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0022 
; 0000 0023 }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;interrupt [10] void timer2_out_comp(void){
; 0000 0027 interrupt [10] void timer2_out_comp(void){
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0028 c_cnt++;}     // 타이머 설정
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;void MCP4921_SPI_Write(unsigned int DAC_Data)
; 0000 002C {
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 002D DAC_MSB = (0b00110000)|(DAC_Data >> 8);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;	DAC_Data -> R16,R17
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 002E DAC_LSB = DAC_Data;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 002F 
; 0000 0030 SPI_CS2 = 0;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0031 SPI_Master_Send(DAC_MSB);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0032 SPI_Master_Send(DAC_LSB);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0033 SPI_CS2 = 1;      //MCP4921을 이용한 설정
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0034 }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;void Init_MCP4921(void)
; 0000 0038 {
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0039 MCP4921_SPI_Write(0x0000);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 003A delay_ms(1);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 003B }
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;void sin_pulse(double SIN[])
; 0000 003E {
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 003F int i;
; 0000 0040 for (i=0; i<100;i++)
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;	SIN -> R18,R19
;	i -> R16,R17
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0041 {
; 0000 0042 SIN[i] = (sin((2* pi * i)/100)+1) * 100;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0043 }
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0044 }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;void main(void)
; 0000 0048 {
;PCODE: $000000D2 VOL: 0
; 0000 0049 
; 0000 004A unsigned int DAC_Data = 0;
; 0000 004B unsigned int i;
; 0000 004C unsigned char key=0;
; 0000 004D double sin[100];
; 0000 004E DDRE = 0xff;
;PCODE: $000000D3 VOL: 0
;	DAC_Data -> R16,R17
;	i -> R18,R19
;	key -> R21
;	sin -> Y+0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 004F DDRD = 0x00;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0050 Init_SPI_Master(); //초기설정
;PCODE: $000000DC VOL: 0
; 0000 0051 Init_MCP4921();
;PCODE: $000000DD VOL: 0
; 0000 0052 Init_Timer2();
;PCODE: $000000DE VOL: 0
; 0000 0053 SREG |= 0x80;
;PCODE: $000000DF VOL: 0
; 0000 0054 
; 0000 0055 sin_pulse(sin);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0056 
; 0000 0057 
; 0000 0058 while (1)
;PCODE: $000000E2 VOL: 0
; 0000 0059 {
; 0000 005A 
; 0000 005B key = (PIND&0xff);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 005C switch(key)
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 005D {
; 0000 005E 
; 0000 005F case 0xFB: //100Hz
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0060 if (c_cnt >= 100) DAC_Data=0, c_cnt =0;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0061 DAC_Data = sin[c_cnt];
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0062 MCP4921_SPI_Write(DAC_Data);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0063 
; 0000 0064 break;
;PCODE: $000000FC VOL: 0
; 0000 0065 case 0xFD: //1kHz
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0066 if (c_cnt >= 10) flag = ~flag, c_cnt =0;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0067 if (flag) DAC_Data = 500;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0068 else DAC_Data = 0;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0069 MCP4921_SPI_Write(DAC_Data);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 006A 
; 0000 006B break;
;PCODE: $00000115 VOL: 0
; 0000 006C case 0xFE: //100Hz
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 006D if (c_cnt >= 100) DAC_Data=0, c_cnt =0;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 006E DAC_Data = DAC_Data + 8;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 006F MCP4921_SPI_Write(DAC_Data);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0070 
; 0000 0071 
; 0000 0072 break;
;PCODE: $00000125 VOL: 0
; 0000 0073 default:
;PCODE: $00000126 VOL: 0
; 0000 0074 break;
;PCODE: $00000127 VOL: 0
; 0000 0075 }
;PCODE: $00000128 VOL: 0
; 0000 0076 
; 0000 0077 
; 0000 0078 
; 0000 0079 }
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 007A }
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
