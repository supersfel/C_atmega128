
AVRASM ver. 2.1.30  C:\Users\정민규\Desktop\마이크로프로세서2\keypad\Debug\List\KeyPad.asm Wed Nov 24 11:57:09 2021

C:\Users\정민규\Desktop\마이크로프로세서2\keypad\Debug\List\KeyPad.asm(1416): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.45 
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 14.745600 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _zero_flag=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0062 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 00b5 	JMP  _compare
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
C:\Users\정민규\Desktop\마이크로프로세서2\keypad\Debug\List\KeyPad.asm(1463): warning: .cseg .db misalignment - padding zero byte
000046 0000      	.DB  0x0
                 
                 _0x3:
000047 f9c0
000048 b0a4
000049 9299
00004a d882      	.DB  0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xD8
00004b 9080
00004c 8388
00004d a1c4
00004e 8e84      	.DB  0x80,0x90,0x88,0x83,0xC4,0xA1,0x84,0x8E
                 _0x4:
00004f 001f
000050 002f
000051 004f
C:\Users\정민규\Desktop\마이크로프로세서2\keypad\Debug\List\KeyPad.asm(1469): warning: .cseg .db misalignment - padding zero byte
000052 008f      	.DB  0x1F,0x0,0x2F,0x0,0x4F,0x0,0x8F
                 _0x22:
000053 0000
000054 0000
000055 0000
000056 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000057 0000      	.DB  0x0,0x0
                 
                 __GLOBAL_INI_TBL:
000058 0001      	.DW  0x01
000059 0005      	.DW  0x05
00005a 008c      	.DW  __REG_VARS*2
                 
00005b 0010      	.DW  0x10
00005c 0500      	.DW  _Port_char
00005d 008e      	.DW  _0x3*2
                 
00005e 0007      	.DW  0x07
00005f 0510      	.DW  _Port_fnd
000060 009e      	.DW  _0x4*2
                 
                 _0xFFFFFFFF:
000061 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000062 94f8      	CLI
000063 27ee      	CLR  R30
000064 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000065 e0f1      	LDI  R31,1
000066 bff5      	OUT  MCUCR,R31
000067 bfe5      	OUT  MCUCR,R30
000068 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00006a e08d      	LDI  R24,(14-2)+1
00006b e0a2      	LDI  R26,2
00006c 27bb      	CLR  R27
                 __CLEAR_REG:
00006d 93ed      	ST   X+,R30
00006e 958a      	DEC  R24
00006f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000070 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000071 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000072 e0a0      	LDI  R26,LOW(__SRAM_START)
000073 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000074 93ed      	ST   X+,R30
000075 9701      	SBIW R24,1
000076 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000077 ebe0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000078 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000079 9185      	LPM  R24,Z+
00007a 9195      	LPM  R25,Z+
00007b 9700      	SBIW R24,0
00007c f061      	BREQ __GLOBAL_INI_END
00007d 91a5      	LPM  R26,Z+
00007e 91b5      	LPM  R27,Z+
00007f 9005      	LPM  R0,Z+
000080 9015      	LPM  R1,Z+
000081 01bf      	MOVW R22,R30
000082 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000083 9005      	LPM  R0,Z+
000084 920d      	ST   X+,R0
000085 9701      	SBIW R24,1
000086 f7e1      	BRNE __GLOBAL_INI_LOOP
000087 01fb      	MOVW R30,R22
000088 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000089 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008a efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008b bfed      	OUT  SPL,R30
00008c e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008e e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008f e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000090 940c 019b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 
                 	.DSEG
                 ;void PORT_Init(void)
                 ; 0000 0013 {
                 
                 	.CSEG
                 _PORT_Init:
                 ; .FSTART _PORT_Init
                 ; 0000 0014 DDRE=0xF0; //FND 출력을 위한 설정
000092 efe0      	LDI  R30,LOW(240)
000093 b9e2      	OUT  0x2,R30
                 ; 0000 0015 DDRF=0xFF; //FND 출력을 위한 설정
000094 efef      	LDI  R30,LOW(255)
000095 93e0 0061 	STS  97,R30
                 ; 0000 0016 DDRC=0x0F; //키패드를 위한 설정
000097 e0ef      	LDI  R30,LOW(15)
000098 bbe4      	OUT  0x14,R30
                 ; 0000 0017 DDRG=0x10; //부저 출력을 위한 설정
000099 e1e0      	LDI  R30,LOW(16)
00009a 93e0 0064 	STS  100,R30
                 ; 0000 0018 DDRB=0x20; //서브모터 출력을 위한 설정
00009c e2e0      	LDI  R30,LOW(32)
00009d bbe7      	OUT  0x17,R30
                 ; 0000 0019 PORTC=0xFF;
00009e efef      	LDI  R30,LOW(255)
00009f bbe5      	OUT  0x15,R30
                 ; 0000 001A }
0000a0 9508      	RET
                 ; .FEND
                 ;void Init_Timer1(void)
                 ; 0000 001D {
                 _Init_Timer1:
                 ; .FSTART _Init_Timer1
                 ; 0000 001E 
                 ; 0000 001F TCCR1A = (1<<COM1A1) | (1<<WGM11);
0000a1 e8e2      	LDI  R30,LOW(130)
0000a2 bdef      	OUT  0x2F,R30
                 ; 0000 0020 TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS11);
0000a3 e1ea      	LDI  R30,LOW(26)
0000a4 bdee      	OUT  0x2E,R30
                 ; 0000 0021 TCNT1 = 0x00;
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 e0f0      	LDI  R31,HIGH(0)
0000a7 bdfd      	OUT  0x2C+1,R31
0000a8 bdec      	OUT  0x2C,R30
                 ; 0000 0022 ICR1 = 36864-1; // TOP 값 : 36864-> 20ms(0.542us X 36864), 0~36863
0000a9 efef      	LDI  R30,LOW(36863)
0000aa e8ff      	LDI  R31,HIGH(36863)
0000ab bdf7      	OUT  0x26+1,R31
0000ac bde6      	OUT  0x26,R30
                 ; 0000 0023 OCR1A =2765 ; // 초기 시작 위치 0도
0000ad eced      	LDI  R30,LOW(2765)
0000ae e0fa      	LDI  R31,HIGH(2765)
0000af bdfb      	OUT  0x2A+1,R31
0000b0 bdea      	OUT  0x2A,R30
                 ; 0000 0024 TIMSK |= (1<<OCIE1A); // Output Compare Match Interrupt 허가
0000b1 b7e7      	IN   R30,0x37
0000b2 61e0      	ORI  R30,0x10
0000b3 bfe7      	OUT  0x37,R30
                 ; 0000 0025 }
0000b4 9508      	RET
                 ; .FEND
                 ;interrupt [13] void compare(void)
                 ; 0000 0028 {
                 _compare:
                 ; .FSTART _compare
                 ; 0000 0029 #asm("nop"); //비교일치 인터럽트 구문
0000b5 0000      	NOP
                 ; 0000 002A }
0000b6 9518      	RETI
                 ; .FEND
                 ;void myDelay_us(unsigned int delay)
                 ; 0000 002D 
                 ; 0000 002E {
                 _myDelay_us:
                 ; .FSTART _myDelay_us
                 ; 0000 002F unsigned int loop;
                 ; 0000 0030 for(loop=0; loop<delay; loop++)
0000b7 d1f0      	RCALL __SAVELOCR4
0000b8 019d      	MOVW R18,R26
                 ;	delay -> R18,R19
                 ;	loop -> R16,R17
                +
0000b9 e000     +LDI R16 , LOW ( 0 )
0000ba e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x6:
                +
0000bb 1702     +CP R16 , R18
0000bc 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
0000bd f430      	BRSH _0x7
                 ; 0000 0031 delay_us(1);
                +
0000be e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0000bf 958a     +DEC R24
0000c0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
                +
0000c1 5f0f     +SUBI R16 , LOW ( - 1 )
0000c2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000c3 cff7      	RJMP _0x6
                 _0x7:
                 ; 0000 0032 }
0000c4 d1ea      	RCALL __LOADLOCR4
0000c5 9624      	ADIW R28,4
0000c6 9508      	RET
                 ; .FEND
                 ;void Buzzer_play(unsigned int delay)
                 ; 0000 0036 {
                 _Buzzer_play:
                 ; .FSTART _Buzzer_play
                 ; 0000 0037 unsigned int loop;
                 ; 0000 0038 unsigned char Play_Tim=0;
                 ; 0000 0039 Play_Tim = 10000/delay;
0000c7 d1de      	RCALL __SAVELOCR6
0000c8 01ad      	MOVW R20,R26
                 ;	delay -> R20,R21
                 ;	loop -> R16,R17
                 ;	Play_Tim -> R19
0000c9 e030      	LDI  R19,0
0000ca 01fa      	MOVW R30,R20
0000cb e1a0      	LDI  R26,LOW(10000)
0000cc e2b7      	LDI  R27,HIGH(10000)
0000cd d21d      	RCALL __DIVW21U
0000ce 2f3e      	MOV  R19,R30
                 ; 0000 003A for(loop=0; loop<Play_Tim; loop++)
                +
0000cf e000     +LDI R16 , LOW ( 0 )
0000d0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x9:
0000d1 2fe3      	MOV  R30,R19
0000d2 01d8      	MOVW R26,R16
0000d3 e0f0      	LDI  R31,0
0000d4 17ae      	CP   R26,R30
0000d5 07bf      	CPC  R27,R31
0000d6 f458      	BRSH _0xA
                 ; 0000 003B {
                 ; 0000 003C PORTG |= 1<<4; //buzzer off, PORTG의 4번 핀 on(out 1)
0000d7 91e0 0065 	LDS  R30,101
0000d9 61e0      	ORI  R30,0x10
0000da d1aa      	RCALL SUBOPT_0x0
                 ; 0000 003D myDelay_us(delay);
                 ; 0000 003E PORTG &= ~(1<<4); //buzzer on, PORTG의 4번 핀 off(out 0)
0000db 91e0 0065 	LDS  R30,101
0000dd 7eef      	ANDI R30,0xEF
0000de d1a6      	RCALL SUBOPT_0x0
                 ; 0000 003F myDelay_us(delay);
                 ; 0000 0040 }
                +
0000df 5f0f     +SUBI R16 , LOW ( - 1 )
0000e0 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000e1 cfef      	RJMP _0x9
                 _0xA:
                 ; 0000 0041 }
0000e2 c0b5      	RJMP _0x2000001
                 ; .FEND
                 ;unsigned char KeyScan(void)
                 ; 0000 0044 {
                 _KeyScan:
                 ; .FSTART _KeyScan
                 ; 0000 0045 unsigned int key_scan_line = 0xFE;
                 ; 0000 0046 unsigned char key_scan_loop =0, getPinData =0;
                 ; 0000 0047 unsigned int key_num =0;
                 ; 0000 0048 for(key_scan_loop =0; key_scan_loop <4;key_scan_loop++)
0000e3 d1c2      	RCALL __SAVELOCR6
                 ;	key_scan_line -> R16,R17
                 ;	key_scan_loop -> R19
                 ;	getPinData -> R18
                 ;	key_num -> R20,R21
                +
0000e4 ef0e     +LDI R16 , LOW ( 254 )
0000e5 e010     +LDI R17 , HIGH ( 254 )
                 	__GETWRN 16,17,254
0000e6 e030      	LDI  R19,0
0000e7 e020      	LDI  R18,0
                +
0000e8 e040     +LDI R20 , LOW ( 0 )
0000e9 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0000ea e030      	LDI  R19,LOW(0)
                 _0xC:
0000eb 3034      	CPI  R19,4
0000ec f5a0      	BRSH _0xD
                 ; 0000 0049 {
                 ; 0000 004A PORTC = key_scan_line;
0000ed bb05      	OUT  0x15,R16
                 ; 0000 004B delay_us(1);
                +
0000ee e085     +LDI R24 , LOW ( 5 )
                +__DELAY_USB_LOOP :
0000ef 958a     +DEC R24
0000f0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 5
                 ; 0000 004C getPinData = PINC & 0xF0;
0000f1 b3e3      	IN   R30,0x13
0000f2 7fe0      	ANDI R30,LOW(0xF0)
0000f3 2f2e      	MOV  R18,R30
                 ; 0000 004D if(getPinData != 0x00)
0000f4 3020      	CPI  R18,0
0000f5 f139      	BREQ _0xE
                 ; 0000 004E {
                 ; 0000 004F switch(getPinData)
0000f6 e0f0      	LDI  R31,0
                 ; 0000 0050 {
                 ; 0000 0051 case 0x10:
0000f7 31e0      	CPI  R30,LOW(0x10)
0000f8 e0a0      	LDI  R26,HIGH(0x10)
0000f9 07fa      	CPC  R31,R26
0000fa f429      	BRNE _0x12
                 ; 0000 0052 key_num = key_scan_loop * 4 +1 ;
0000fb e0e4      	LDI  R30,LOW(4)
0000fc 9fe3      	MUL  R30,R19
0000fd 01f0      	MOVW R30,R0
0000fe 9631      	ADIW R30,1
0000ff c01a      	RJMP _0x3D
                 ; 0000 0053 break;
                 ; 0000 0054 case 0x20:
                 _0x12:
000100 32e0      	CPI  R30,LOW(0x20)
000101 e0a0      	LDI  R26,HIGH(0x20)
000102 07fa      	CPC  R31,R26
000103 f429      	BRNE _0x13
                 ; 0000 0055 key_num = key_scan_loop * 4 +2 ;
000104 e0e4      	LDI  R30,LOW(4)
000105 9fe3      	MUL  R30,R19
000106 01f0      	MOVW R30,R0
000107 9632      	ADIW R30,2
000108 c011      	RJMP _0x3D
                 ; 0000 0056 break;
                 ; 0000 0057 case 0x40:
                 _0x13:
000109 34e0      	CPI  R30,LOW(0x40)
00010a e0a0      	LDI  R26,HIGH(0x40)
00010b 07fa      	CPC  R31,R26
00010c f429      	BRNE _0x14
                 ; 0000 0058 key_num = key_scan_loop * 4 +3 ;
00010d e0e4      	LDI  R30,LOW(4)
00010e 9fe3      	MUL  R30,R19
00010f 01f0      	MOVW R30,R0
000110 9633      	ADIW R30,3
000111 c008      	RJMP _0x3D
                 ; 0000 0059 break;
                 ; 0000 005A case 0x80:
                 _0x14:
000112 38e0      	CPI  R30,LOW(0x80)
000113 e0a0      	LDI  R26,HIGH(0x80)
000114 07fa      	CPC  R31,R26
000115 f429      	BRNE _0x11
                 ; 0000 005B key_num = key_scan_loop * 4 +4 ;
000116 e0e4      	LDI  R30,LOW(4)
000117 9fe3      	MUL  R30,R19
000118 01f0      	MOVW R30,R0
000119 9634      	ADIW R30,4
                 _0x3D:
00011a 01af      	MOVW R20,R30
                 ; 0000 005C break;
                 ; 0000 005D }
                 _0x11:
                 ; 0000 005E return key_num;
00011b 2fe4      	MOV  R30,R20
00011c c07b      	RJMP _0x2000001
                 ; 0000 005F }
                 ; 0000 0060 key_scan_line = (key_scan_line <<1);
                 _0xE:
00011d 0f00      	LSL  R16
00011e 1f11      	ROL  R17
                 ; 0000 0061 }
00011f 5f3f      	SUBI R19,-1
000120 cfca      	RJMP _0xC
                 _0xD:
                 ; 0000 0062 
                 ; 0000 0063 }
000121 c076      	RJMP _0x2000001
                 ; .FEND
                 ;unsigned char Changenum(unsigned char num)
                 ; 0000 0065 {
                 _Changenum:
                 ; .FSTART _Changenum
                 ; 0000 0066 
                 ; 0000 0067 unsigned char return_num=0;
                 ; 0000 0068 if(num ==0){
000122 931a      	ST   -Y,R17
000123 930a      	ST   -Y,R16
000124 2f0a      	MOV  R16,R26
                 ;	num -> R16
                 ;	return_num -> R17
000125 e010      	LDI  R17,0
000126 3000      	CPI  R16,0
000127 f411      	BRNE _0x16
                 ; 0000 0069 return_num =0;
000128 e010      	LDI  R17,LOW(0)
                 ; 0000 006A }
                 ; 0000 006B else if (num%4 ==0){         // 1 2 3 13
000129 c034      	RJMP _0x17
                 _0x16:
00012a 2fa0      	MOV  R26,R16
00012b 27bb      	CLR  R27
00012c e0e4      	LDI  R30,LOW(4)
00012d e0f0      	LDI  R31,HIGH(4)
00012e d1d7      	RCALL __MODW21
00012f 9730      	SBIW R30,0
000130 f421      	BRNE _0x18
                 ; 0000 006C return_num = 12 + num/4;   // 4 5 6 14
000131 d157      	RCALL SUBOPT_0x1
000132 5fe4      	SUBI R30,-LOW(12)
000133 2f1e      	MOV  R17,R30
                 ; 0000 006D // 7 8 9 15
                 ; 0000 006E }                             // 10 0 12 16
                 ; 0000 006F else if( num/4 ==0){ // 위처럼 인식되게 변환
000134 c029      	RJMP _0x19
                 _0x18:
000135 d153      	RCALL SUBOPT_0x1
000136 9730      	SBIW R30,0
000137 f429      	BRNE _0x1A
                 ; 0000 0070 return_num = (4*(num/4) +num%4) ;
000138 d150      	RCALL SUBOPT_0x1
000139 d155      	RCALL SUBOPT_0x2
00013a 0de0      	ADD  R30,R0
00013b 2f1e      	MOV  R17,R30
                 ; 0000 0071 }
                 ; 0000 0072 else if( num/4 ==1){
00013c c021      	RJMP _0x1B
                 _0x1A:
00013d d14b      	RCALL SUBOPT_0x1
00013e 30e1      	CPI  R30,LOW(0x1)
00013f e0a0      	LDI  R26,HIGH(0x1)
000140 07fa      	CPC  R31,R26
000141 f431      	BRNE _0x1C
                 ; 0000 0073 return_num = (4*(num/4) +num%4) -1 ;
000142 d146      	RCALL SUBOPT_0x1
000143 d14b      	RCALL SUBOPT_0x2
000144 2da0      	MOV  R26,R0
000145 0fae      	ADD  R26,R30
000146 50a1      	SUBI R26,LOW(1)
000147 c015      	RJMP _0x3E
                 ; 0000 0074 }
                 ; 0000 0075 else if( num/4 ==2){
                 _0x1C:
000148 d140      	RCALL SUBOPT_0x1
000149 30e2      	CPI  R30,LOW(0x2)
00014a e0a0      	LDI  R26,HIGH(0x2)
00014b 07fa      	CPC  R31,R26
00014c f431      	BRNE _0x1E
                 ; 0000 0076 return_num = (4*(num/4) +num%4) -2 ;
00014d d13b      	RCALL SUBOPT_0x1
00014e d140      	RCALL SUBOPT_0x2
00014f 2da0      	MOV  R26,R0
000150 0fae      	ADD  R26,R30
000151 50a2      	SUBI R26,LOW(2)
000152 c00a      	RJMP _0x3E
                 ; 0000 0077 }
                 ; 0000 0078 else if( num/4 ==3){
                 _0x1E:
000153 d135      	RCALL SUBOPT_0x1
000154 30e3      	CPI  R30,LOW(0x3)
000155 e0a0      	LDI  R26,HIGH(0x3)
000156 07fa      	CPC  R31,R26
000157 f431      	BRNE _0x20
                 ; 0000 0079 return_num = (4*(num/4) +num%4) -3 ;
000158 d130      	RCALL SUBOPT_0x1
000159 d135      	RCALL SUBOPT_0x2
00015a 2da0      	MOV  R26,R0
00015b 0fae      	ADD  R26,R30
00015c 50a3      	SUBI R26,LOW(3)
                 _0x3E:
00015d 2f1a      	MOV  R17,R26
                 ; 0000 007A }
                 ; 0000 007B if (return_num ==11){
                 _0x20:
                 _0x1B:
                 _0x19:
                 _0x17:
00015e 301b      	CPI  R17,11
00015f f419      	BRNE _0x21
                 ; 0000 007C return_num =0;
000160 e010      	LDI  R17,LOW(0)
                 ; 0000 007D zero_flag =1; // 아무것도 누르지 않을때도 0이 저장되기에
000161 e0e1      	LDI  R30,LOW(1)
000162 2e5e      	MOV  R5,R30
                 ; 0000 007E // 0을 누를때 zero_flag동작되게 설정
                 ; 0000 007F 
                 ; 0000 0080 
                 ; 0000 0081 
                 ; 0000 0082 }
                 ; 0000 0083 return return_num;
                 _0x21:
000163 2fe1      	MOV  R30,R17
000164 9109      	LD   R16,Y+
000165 9119      	LD   R17,Y+
000166 9508      	RET
                 ; 0000 0084 
                 ; 0000 0085 
                 ; 0000 0086 
                 ; 0000 0087 }
                 ; .FEND
                 ;void OUTFND( unsigned int t)
                 ; 0000 008C {
                 _OUTFND:
                 ; .FSTART _OUTFND
                 ; 0000 008D unsigned char FND0, FND1, FND2, FND3;
                 ; 0000 008E // 숫자 t를 받아서 FND에 출력하는 함수
                 ; 0000 008F FND3 = t/1000;
000167 d13e      	RCALL __SAVELOCR6
000168 01ad      	MOVW R20,R26
                 ;	t -> R20,R21
                 ;	FND0 -> R17
                 ;	FND1 -> R16
                 ;	FND2 -> R19
                 ;	FND3 -> R18
000169 eee8      	LDI  R30,LOW(1000)
00016a e0f3      	LDI  R31,HIGH(1000)
00016b d17f      	RCALL __DIVW21U
00016c 2f2e      	MOV  R18,R30
                 ; 0000 0090 FND2 = (t%1000)/100;
00016d 01da      	MOVW R26,R20
00016e eee8      	LDI  R30,LOW(1000)
00016f e0f3      	LDI  R31,HIGH(1000)
000170 d192      	RCALL __MODW21U
000171 01df      	MOVW R26,R30
000172 e6e4      	LDI  R30,LOW(100)
000173 e0f0      	LDI  R31,HIGH(100)
000174 d176      	RCALL __DIVW21U
000175 2f3e      	MOV  R19,R30
                 ; 0000 0091 FND1 = (t%100)/10;
000176 01da      	MOVW R26,R20
000177 e6e4      	LDI  R30,LOW(100)
000178 e0f0      	LDI  R31,HIGH(100)
000179 d189      	RCALL __MODW21U
00017a 01df      	MOVW R26,R30
00017b e0ea      	LDI  R30,LOW(10)
00017c e0f0      	LDI  R31,HIGH(10)
00017d d16d      	RCALL __DIVW21U
00017e 2f0e      	MOV  R16,R30
                 ; 0000 0092 FND0 = t%10;
00017f 01da      	MOVW R26,R20
000180 e0ea      	LDI  R30,LOW(10)
000181 e0f0      	LDI  R31,HIGH(10)
000182 d180      	RCALL __MODW21U
000183 2f1e      	MOV  R17,R30
                 ; 0000 0093 PORTE = Port_fnd[0];
000184 91e0 0510 	LDS  R30,_Port_fnd
000186 b9e3      	OUT  0x3,R30
                 ; 0000 0094 PORTF = Port_char[FND0]; //1의자리
000187 2fe1      	MOV  R30,R17
000188 d10f      	RCALL SUBOPT_0x3
                 ; 0000 0095 delay_ms(10);
                 ; 0000 0096 PORTE = Port_fnd[1];
                +
000189 91e0 0512+LDS R30 , _Port_fnd + ( 2 )
                 	__GETB1MN _Port_fnd,2
00018b b9e3      	OUT  0x3,R30
                 ; 0000 0097 PORTF = Port_char[FND1]; //10의자리
00018c 2fe0      	MOV  R30,R16
00018d d10a      	RCALL SUBOPT_0x3
                 ; 0000 0098 delay_ms(10);
                 ; 0000 0099 PORTE = Port_fnd[2];
                +
00018e 91e0 0514+LDS R30 , _Port_fnd + ( 4 )
                 	__GETB1MN _Port_fnd,4
000190 b9e3      	OUT  0x3,R30
                 ; 0000 009A PORTF = Port_char[FND2]; //100의 자리
000191 2fe3      	MOV  R30,R19
000192 d105      	RCALL SUBOPT_0x3
                 ; 0000 009B delay_ms(10);
                 ; 0000 009C PORTE = Port_fnd[3]; //1000의 자리
                +
000193 91e0 0516+LDS R30 , _Port_fnd + ( 6 )
                 	__GETB1MN _Port_fnd,6
000195 b9e3      	OUT  0x3,R30
                 ; 0000 009D PORTF = Port_char[FND3];
000196 2fe2      	MOV  R30,R18
000197 d100      	RCALL SUBOPT_0x3
                 ; 0000 009E delay_ms(10);
                 ; 0000 009F }
                 _0x2000001:
000198 d114      	RCALL __LOADLOCR6
000199 9626      	ADIW R28,6
00019a 9508      	RET
                 ; .FEND
                 ;void main (void)
                 ; 0000 00A2 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00A3 int t=0; //키패드로 받은 숫자
                 ; 0000 00A4 int count =0; //count 변수
                 ; 0000 00A5 int finalnum=0; //FND에 출력으로 넣어줄 변수
                 ; 0000 00A6 int fnd[4]={0,0,0,0};
                 ; 0000 00A7 signed int angle=0; // 서브모터 각도로 넣을 변수
                 ; 0000 00A8 Init_Timer1(); // 타이머 초기설정
00019b 972a      	SBIW R28,10
00019c e08a      	LDI  R24,10
                +
00019d e060     +LDI R22 , LOW ( 0 )
00019e e070     +LDI R23 , HIGH ( 0 )
                 	__GETWRN 22,23,0
00019f eae6      	LDI  R30,LOW(_0x22*2)
0001a0 e0f0      	LDI  R31,HIGH(_0x22*2)
0001a1 d112      	RCALL __INITLOCB
                 ;	t -> R16,R17
                 ;	count -> R18,R19
                 ;	finalnum -> R20,R21
                 ;	fnd -> Y+2
                 ;	angle -> Y+0
                +
0001a2 e000     +LDI R16 , LOW ( 0 )
0001a3 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0001a4 e020     +LDI R18 , LOW ( 0 )
0001a5 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0001a6 e040     +LDI R20 , LOW ( 0 )
0001a7 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0001a8 def8      	RCALL _Init_Timer1
                 ; 0000 00A9 PORT_Init(); // 포트들 입출력 초기 설정
0001a9 dee8      	RCALL _PORT_Init
                 ; 0000 00AA while(1)
                 _0x23:
                 ; 0000 00AB {
                 ; 0000 00AC t= Changenum(KeyScan());
0001aa df38      	RCALL _KeyScan
0001ab 2fae      	MOV  R26,R30
0001ac df75      	RCALL _Changenum
0001ad 2f0e      	MOV  R16,R30
0001ae 2711      	CLR  R17
                 ; 0000 00AD if(t<10 & t>0 ) //숫자가 눌리면 새로운 값을 저장하도록 count값 설정
0001af 01d8      	MOVW R26,R16
0001b0 e0ea      	LDI  R30,LOW(10)
0001b1 e0f0      	LDI  R31,HIGH(10)
0001b2 d11f      	RCALL __LTW12
0001b3 2e0e      	MOV  R0,R30
0001b4 e0e0      	LDI  R30,LOW(0)
0001b5 e0f0      	LDI  R31,HIGH(0)
0001b6 d121      	RCALL __GTW12
0001b7 21e0      	AND  R30,R0
0001b8 f011      	BREQ _0x26
                 ; 0000 00AE {
                 ; 0000 00AF count++;
0001b9 d0e7      	RCALL SUBOPT_0x4
                 ; 0000 00B0 delay_ms(50);
                 ; 0000 00B1 }
                 ; 0000 00B2 else if(t==0 & zero_flag) //zero_flag가 실행된 경우에만 0으로 입력
0001ba c047      	RJMP _0x27
                 _0x26:
0001bb 01d8      	MOVW R26,R16
0001bc e0e0      	LDI  R30,LOW(0)
0001bd e0f0      	LDI  R31,HIGH(0)
0001be d10d      	RCALL __EQW12
0001bf 21e5      	AND  R30,R5
0001c0 f039      	BREQ _0x28
                 ; 0000 00B3 {
                 ; 0000 00B4 count++;
                +
0001c1 5f2f     +SUBI R18 , LOW ( - 1 )
0001c2 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 00B5 zero_flag =0; //계속 0으로 입력된 상태가 안되게 zero_flag를 다시 0으로
0001c3 2455      	CLR  R5
                 ; 0000 00B6 delay_ms(50);
0001c4 e3a2      	LDI  R26,LOW(50)
0001c5 e0b0      	LDI  R27,0
0001c6 d29b      	RCALL _delay_ms
                 ; 0000 00B7 }
                 ; 0000 00B8 else if(t==13) // FND 출력숫자 리셋버튼 기능
0001c7 c03a      	RJMP _0x29
                 _0x28:
0001c8 e0ed      	LDI  R30,LOW(13)
0001c9 e0f0      	LDI  R31,HIGH(13)
0001ca 17e0      	CP   R30,R16
0001cb 07f1      	CPC  R31,R17
0001cc f451      	BRNE _0x2A
                 ; 0000 00B9 {
                 ; 0000 00BA fnd[0]=0;
0001cd e0e0      	LDI  R30,LOW(0)
0001ce 83ea      	STD  Y+2,R30
0001cf 83eb      	STD  Y+2+1,R30
                 ; 0000 00BB fnd[1]=0;
0001d0 83ec      	STD  Y+4,R30
0001d1 83ed      	STD  Y+4+1,R30
                 ; 0000 00BC fnd[2]=0;
0001d2 83ee      	STD  Y+6,R30
0001d3 83ef      	STD  Y+6+1,R30
                 ; 0000 00BD fnd[3]=0;
0001d4 87e8      	STD  Y+8,R30
0001d5 87e9      	STD  Y+8+1,R30
                 ; 0000 00BE }
                 ; 0000 00BF else if (t ==14) //현재 FND의 숫자각도만큼 모터각도 변경
0001d6 c02b      	RJMP _0x2B
                 _0x2A:
0001d7 e0ee      	LDI  R30,LOW(14)
0001d8 e0f0      	LDI  R31,HIGH(14)
0001d9 17e0      	CP   R30,R16
0001da 07f1      	CPC  R31,R17
0001db f531      	BRNE _0x2C
                 ; 0000 00C0 {
                 ; 0000 00C1 angle = finalnum%360;
0001dc 01da      	MOVW R26,R20
0001dd e6e8      	LDI  R30,LOW(360)
0001de e0f1      	LDI  R31,HIGH(360)
0001df d126      	RCALL __MODW21
0001e0 83e8      	ST   Y,R30
0001e1 83f9      	STD  Y+1,R31
                 ; 0000 00C2 if(angle >= 180){ //예제 모터는 90도까지만되나 180도 이상은
0001e2 81a8      	LD   R26,Y
0001e3 81b9      	LDD  R27,Y+1
0001e4 3ba4      	CPI  R26,LOW(0xB4)
0001e5 e0e0      	LDI  R30,HIGH(0xB4)
0001e6 07be      	CPC  R27,R30
0001e7 f034      	BRLT _0x2D
                 ; 0000 00C3 angle -= 360; //-각도로 생각
0001e8 81e8      	LD   R30,Y
0001e9 81f9      	LDD  R31,Y+1
0001ea 56e8      	SUBI R30,LOW(360)
0001eb 40f1      	SBCI R31,HIGH(360)
0001ec 83e8      	ST   Y,R30
0001ed 83f9      	STD  Y+1,R31
                 ; 0000 00C4 }
                 ; 0000 00C5 OCR1A = 2765 + 10.249*angle; //1도단위까지도 입력 가능
                 _0x2D:
0001ee 81e8      	LD   R30,Y
0001ef 81f9      	LDD  R31,Y+1
                +
0001f0 2f6f     +MOV R22 , R31
0001f1 0f66     +ADD R22 , R22
0001f2 0b66     +SBC R22 , R22
0001f3 2f76     +MOV R23 , R22
                 	__CWD1
0001f4 d19d      	RCALL __CDF1
                +
0001f5 eea7     +LDI R26 , LOW ( 0x4123FBE7 )
0001f6 efbb     +LDI R27 , HIGH ( 0x4123FBE7 )
0001f7 e283     +LDI R24 , BYTE3 ( 0x4123FBE7 )
0001f8 e491     +LDI R25 , BYTE4 ( 0x4123FBE7 )
                 	__GETD2N 0x4123FBE7
0001f9 d21a      	RCALL __MULF12
                +
0001fa e0a0     +LDI R26 , LOW ( 0x452CD000 )
0001fb edb0     +LDI R27 , HIGH ( 0x452CD000 )
0001fc e28c     +LDI R24 , BYTE3 ( 0x452CD000 )
0001fd e495     +LDI R25 , BYTE4 ( 0x452CD000 )
                 	__GETD2N 0x452CD000
0001fe d1c6      	RCALL __ADDF12
0001ff d159      	RCALL __CFD1U
000200 bdfb      	OUT  0x2A+1,R31
000201 bdea      	OUT  0x2A,R30
                 ; 0000 00C6 }
                 ; 0000 00C7 if((count%2) ==0){ //count가 짝수일때 들어온 t값을 저장하고
                 _0x2C:
                 _0x2B:
                 _0x29:
                 _0x27:
000202 01d9      	MOVW R26,R18
000203 e0e2      	LDI  R30,LOW(2)
000204 e0f0      	LDI  R31,HIGH(2)
000205 d100      	RCALL __MODW21
000206 9730      	SBIW R30,0
000207 f4c1      	BRNE _0x2E
                 ; 0000 00C8 //다시 count를 홀수로 만듬
                 ; 0000 00C9 fnd[3] = fnd[2];
000208 81ee      	LDD  R30,Y+6
000209 81ff      	LDD  R31,Y+6+1
00020a 87e8      	STD  Y+8,R30
00020b 87f9      	STD  Y+8+1,R31
                 ; 0000 00CA delay_ms(50);
00020c e3a2      	LDI  R26,LOW(50)
00020d e0b0      	LDI  R27,0
00020e d253      	RCALL _delay_ms
                 ; 0000 00CB fnd[2] = fnd[1];
00020f 81ec      	LDD  R30,Y+4
000210 81fd      	LDD  R31,Y+4+1
000211 83ee      	STD  Y+6,R30
000212 83ff      	STD  Y+6+1,R31
                 ; 0000 00CC delay_ms(50);
000213 e3a2      	LDI  R26,LOW(50)
000214 e0b0      	LDI  R27,0
000215 d24c      	RCALL _delay_ms
                 ; 0000 00CD fnd[1] = fnd[0];
000216 81ea      	LDD  R30,Y+2
000217 81fb      	LDD  R31,Y+2+1
000218 83ec      	STD  Y+4,R30
000219 83fd      	STD  Y+4+1,R31
                 ; 0000 00CE delay_ms(50);
00021a e3a2      	LDI  R26,LOW(50)
00021b e0b0      	LDI  R27,0
00021c d245      	RCALL _delay_ms
                 ; 0000 00CF fnd[0] = t;
                +
00021d 830a     +STD Y + 2 , R16
00021e 831b     +STD Y + 2 + 1 , R17
                 	__PUTWSR 16,17,2
                 ; 0000 00D0 count++;
00021f d081      	RCALL SUBOPT_0x4
                 ; 0000 00D1 delay_ms(50);
                 ; 0000 00D2 }
                 ; 0000 00D3 finalnum = 1000*fnd[3] + 100*fnd[2] + 10*fnd[1] + fnd[0];
                 _0x2E:
000220 85e8      	LDD  R30,Y+8
000221 85f9      	LDD  R31,Y+8+1
000222 eea8      	LDI  R26,LOW(1000)
000223 e0b3      	LDI  R27,HIGH(1000)
000224 d0c1      	RCALL __MULW12
000225 01bf      	MOVW R22,R30
000226 81ee      	LDD  R30,Y+6
000227 81ff      	LDD  R31,Y+6+1
000228 e6a4      	LDI  R26,LOW(100)
000229 e0b0      	LDI  R27,HIGH(100)
00022a d0bb      	RCALL __MULW12
                +
00022b 0f6e     +ADD R22 , R30
00022c 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
00022d 81ec      	LDD  R30,Y+4
00022e 81fd      	LDD  R31,Y+4+1
00022f e0aa      	LDI  R26,LOW(10)
000230 e0b0      	LDI  R27,HIGH(10)
000231 d0b4      	RCALL __MULW12
000232 0fe6      	ADD  R30,R22
000233 1ff7      	ADC  R31,R23
000234 81aa      	LDD  R26,Y+2
000235 81bb      	LDD  R27,Y+2+1
000236 0fea      	ADD  R30,R26
000237 1ffb      	ADC  R31,R27
000238 01af      	MOVW R20,R30
                 ; 0000 00D4 OUTFND(finalnum);
000239 01da      	MOVW R26,R20
00023a df2c      	RCALL _OUTFND
                 ; 0000 00D5 switch(t) //각 키패드마다 나오는 음 설정
00023b 01f8      	MOVW R30,R16
                 ; 0000 00D6 {
                 ; 0000 00D7 case 1:
00023c 30e1      	CPI  R30,LOW(0x1)
00023d e0a0      	LDI  R26,HIGH(0x1)
00023e 07fa      	CPC  R31,R26
00023f f421      	BRNE _0x32
                 ; 0000 00D8 Buzzer_play(Do);
000240 e7a4      	LDI  R26,LOW(1908)
000241 e0b7      	LDI  R27,HIGH(1908)
000242 de84      	RCALL _Buzzer_play
                 ; 0000 00D9 break;
000243 c03f      	RJMP _0x31
                 ; 0000 00DA case 2:
                 _0x32:
000244 30e2      	CPI  R30,LOW(0x2)
000245 e0a0      	LDI  R26,HIGH(0x2)
000246 07fa      	CPC  R31,R26
000247 f421      	BRNE _0x33
                 ; 0000 00DB Buzzer_play(Re);
000248 eaa4      	LDI  R26,LOW(1700)
000249 e0b6      	LDI  R27,HIGH(1700)
00024a de7c      	RCALL _Buzzer_play
                 ; 0000 00DC break;
00024b c037      	RJMP _0x31
                 ; 0000 00DD case 3:
                 _0x33:
00024c 30e3      	CPI  R30,LOW(0x3)
00024d e0a0      	LDI  R26,HIGH(0x3)
00024e 07fa      	CPC  R31,R26
00024f f421      	BRNE _0x34
                 ; 0000 00DE Buzzer_play(Mi);
000250 eeab      	LDI  R26,LOW(1515)
000251 e0b5      	LDI  R27,HIGH(1515)
000252 de74      	RCALL _Buzzer_play
                 ; 0000 00DF break;
000253 c02f      	RJMP _0x31
                 ; 0000 00E0 case 4:
                 _0x34:
000254 30e4      	CPI  R30,LOW(0x4)
000255 e0a0      	LDI  R26,HIGH(0x4)
000256 07fa      	CPC  R31,R26
000257 f421      	BRNE _0x35
                 ; 0000 00E1 Buzzer_play(Fa);
000258 e9a8      	LDI  R26,LOW(1432)
000259 e0b5      	LDI  R27,HIGH(1432)
00025a de6c      	RCALL _Buzzer_play
                 ; 0000 00E2 break;
00025b c027      	RJMP _0x31
                 ; 0000 00E3 case 5:
                 _0x35:
00025c 30e5      	CPI  R30,LOW(0x5)
00025d e0a0      	LDI  R26,HIGH(0x5)
00025e 07fa      	CPC  R31,R26
00025f f421      	BRNE _0x36
                 ; 0000 00E4 Buzzer_play(Sol);
000260 efab      	LDI  R26,LOW(1275)
000261 e0b4      	LDI  R27,HIGH(1275)
000262 de64      	RCALL _Buzzer_play
                 ; 0000 00E5 break;
000263 c01f      	RJMP _0x31
                 ; 0000 00E6 case 6:
                 _0x36:
000264 30e6      	CPI  R30,LOW(0x6)
000265 e0a0      	LDI  R26,HIGH(0x6)
000266 07fa      	CPC  R31,R26
000267 f421      	BRNE _0x37
                 ; 0000 00E7 Buzzer_play(La);
000268 e7a0      	LDI  R26,LOW(1136)
000269 e0b4      	LDI  R27,HIGH(1136)
00026a de5c      	RCALL _Buzzer_play
                 ; 0000 00E8 break;
00026b c017      	RJMP _0x31
                 ; 0000 00E9 case 7:
                 _0x37:
00026c 30e7      	CPI  R30,LOW(0x7)
00026d e0a0      	LDI  R26,HIGH(0x7)
00026e 07fa      	CPC  R31,R26
00026f f421      	BRNE _0x38
                 ; 0000 00EA Buzzer_play(Si);
000270 efa4      	LDI  R26,LOW(1012)
000271 e0b3      	LDI  R27,HIGH(1012)
000272 de54      	RCALL _Buzzer_play
                 ; 0000 00EB break;
000273 c00f      	RJMP _0x31
                 ; 0000 00EC case 8:
                 _0x38:
000274 30e8      	CPI  R30,LOW(0x8)
000275 e0a0      	LDI  R26,HIGH(0x8)
000276 07fa      	CPC  R31,R26
000277 f421      	BRNE _0x39
                 ; 0000 00ED Buzzer_play(Do/2);
000278 ebaa      	LDI  R26,LOW(954)
000279 e0b3      	LDI  R27,HIGH(954)
00027a de4c      	RCALL _Buzzer_play
                 ; 0000 00EE break;
00027b c007      	RJMP _0x31
                 ; 0000 00EF case 9:
                 _0x39:
00027c 30e9      	CPI  R30,LOW(0x9)
00027d e0a0      	LDI  R26,HIGH(0x9)
00027e 07fa      	CPC  R31,R26
00027f f419      	BRNE _0x3B
                 ; 0000 00F0 Buzzer_play(Re/2);
000280 e5a2      	LDI  R26,LOW(850)
000281 e0b3      	LDI  R27,HIGH(850)
000282 de44      	RCALL _Buzzer_play
                 ; 0000 00F1 break;
                 ; 0000 00F2 default:
                 _0x3B:
                 ; 0000 00F3 break;
                 ; 0000 00F4 }
                 _0x31:
                 ; 0000 00F5 }
000283 cf26      	RJMP _0x23
                 ; 0000 00F6 }
                 _0x3C:
000284 cfff      	RJMP _0x3C
                 ; .FEND
                 
                 	.DSEG
                 _Port_char:
000500           	.BYTE 0x10
                 _Port_fnd:
000510           	.BYTE 0x8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000285 93e0 0065 	STS  101,R30
000287 01da      	MOVW R26,R20
000288 ce2e      	RJMP _myDelay_us
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x1:
000289 2fa0      	MOV  R26,R16
00028a e0b0      	LDI  R27,0
00028b e0e4      	LDI  R30,LOW(4)
00028c e0f0      	LDI  R31,HIGH(4)
00028d d070      	RCALL __DIVW21
00028e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x2:
00028f 0fee      	LSL  R30
000290 0fee      	LSL  R30
000291 2e0e      	MOV  R0,R30
000292 2fe0      	MOV  R30,R16
000293 e0f0      	LDI  R31,0
000294 e0a3      	LDI  R26,LOW(3)
000295 e0b0      	LDI  R27,HIGH(3)
000296 d07d      	RCALL __MANDW12
000297 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x3:
000298 e0f0      	LDI  R31,0
000299 50e0      	SUBI R30,LOW(-_Port_char)
00029a 4ffb      	SBCI R31,HIGH(-_Port_char)
00029b 81e0      	LD   R30,Z
00029c 93e0 0062 	STS  98,R30
00029e e0aa      	LDI  R26,LOW(10)
00029f e0b0      	LDI  R27,0
0002a0 c1c1      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
                +
0002a1 5f2f     +SUBI R18 , LOW ( - 1 )
0002a2 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002a3 e3a2      	LDI  R26,LOW(50)
0002a4 e0b0      	LDI  R27,0
0002a5 c1bc      	RJMP _delay_ms
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0002a6 935a      	ST   -Y,R21
                 __SAVELOCR5:
0002a7 934a      	ST   -Y,R20
                 __SAVELOCR4:
0002a8 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002a9 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002aa 931a      	ST   -Y,R17
0002ab 930a      	ST   -Y,R16
0002ac 9508      	RET
                 
                 __LOADLOCR6:
0002ad 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0002ae 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0002af 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002b0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002b1 8119      	LDD  R17,Y+1
0002b2 8108      	LD   R16,Y
0002b3 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0002b4 93af      	PUSH R26
0002b5 93bf      	PUSH R27
0002b6 01db      	MOVW R26,R22
0002b7 0fac      	ADD  R26,R28
0002b8 1fbd      	ADC  R27,R29
                 __INITLOC0:
0002b9 9005      	LPM  R0,Z+
0002ba 920d      	ST   X+,R0
0002bb 958a      	DEC  R24
0002bc f7e1      	BRNE __INITLOC0
0002bd 91bf      	POP  R27
0002be 91af      	POP  R26
0002bf 9508      	RET
                 
                 __ANEGW1:
0002c0 95f1      	NEG  R31
0002c1 95e1      	NEG  R30
0002c2 40f0      	SBCI R31,0
0002c3 9508      	RET
                 
                 __ANEGD1:
0002c4 95f0      	COM  R31
0002c5 9560      	COM  R22
0002c6 9570      	COM  R23
0002c7 95e1      	NEG  R30
0002c8 4fff      	SBCI R31,-1
0002c9 4f6f      	SBCI R22,-1
0002ca 4f7f      	SBCI R23,-1
0002cb 9508      	RET
                 
                 __EQW12:
0002cc 17ea      	CP   R30,R26
0002cd 07fb      	CPC  R31,R27
0002ce e0e1      	LDI  R30,1
0002cf f009      	BREQ __EQW12T
0002d0 27ee      	CLR  R30
                 __EQW12T:
0002d1 9508      	RET
                 
                 __LTW12:
0002d2 17ae      	CP   R26,R30
0002d3 07bf      	CPC  R27,R31
0002d4 e0e1      	LDI  R30,1
0002d5 f00c      	BRLT __LTW12T
0002d6 27ee      	CLR  R30
                 __LTW12T:
0002d7 9508      	RET
                 
                 __GTW12:
0002d8 17ea      	CP   R30,R26
0002d9 07fb      	CPC  R31,R27
0002da e0e1      	LDI  R30,1
0002db f00c      	BRLT __GTW12T
0002dc 27ee      	CLR  R30
                 __GTW12T:
0002dd 9508      	RET
                 
                 __MULW12U:
0002de 9ffa      	MUL  R31,R26
0002df 2df0      	MOV  R31,R0
0002e0 9feb      	MUL  R30,R27
0002e1 0df0      	ADD  R31,R0
0002e2 9fea      	MUL  R30,R26
0002e3 2de0      	MOV  R30,R0
0002e4 0df1      	ADD  R31,R1
0002e5 9508      	RET
                 
                 __MULW12:
0002e6 d037      	RCALL __CHKSIGNW
0002e7 dff6      	RCALL __MULW12U
0002e8 f40e      	BRTC __MULW121
0002e9 dfd6      	RCALL __ANEGW1
                 __MULW121:
0002ea 9508      	RET
                 
                 __DIVW21U:
0002eb 2400      	CLR  R0
0002ec 2411      	CLR  R1
0002ed e190      	LDI  R25,16
                 __DIVW21U1:
0002ee 0faa      	LSL  R26
0002ef 1fbb      	ROL  R27
0002f0 1c00      	ROL  R0
0002f1 1c11      	ROL  R1
0002f2 1a0e      	SUB  R0,R30
0002f3 0a1f      	SBC  R1,R31
0002f4 f418      	BRCC __DIVW21U2
0002f5 0e0e      	ADD  R0,R30
0002f6 1e1f      	ADC  R1,R31
0002f7 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002f8 60a1      	SBR  R26,1
                 __DIVW21U3:
0002f9 959a      	DEC  R25
0002fa f799      	BRNE __DIVW21U1
0002fb 01fd      	MOVW R30,R26
0002fc 01d0      	MOVW R26,R0
0002fd 9508      	RET
                 
                 __DIVW21:
0002fe d01f      	RCALL __CHKSIGNW
0002ff dfeb      	RCALL __DIVW21U
000300 f40e      	BRTC __DIVW211
000301 dfbe      	RCALL __ANEGW1
                 __DIVW211:
000302 9508      	RET
                 
                 __MODW21U:
000303 dfe7      	RCALL __DIVW21U
000304 01fd      	MOVW R30,R26
000305 9508      	RET
                 
                 __MODW21:
000306 94e8      	CLT
000307 ffb7      	SBRS R27,7
000308 c004      	RJMP __MODW211
000309 95b1      	NEG  R27
00030a 95a1      	NEG  R26
00030b 40b0      	SBCI R27,0
00030c 9468      	SET
                 __MODW211:
00030d fdf7      	SBRC R31,7
00030e dfb1      	RCALL __ANEGW1
00030f dfdb      	RCALL __DIVW21U
000310 01fd      	MOVW R30,R26
000311 f40e      	BRTC __MODW212
000312 dfad      	RCALL __ANEGW1
                 __MODW212:
000313 9508      	RET
                 
                 __MANDW12:
000314 94e8      	CLT
000315 fff7      	SBRS R31,7
000316 c002      	RJMP __MANDW121
000317 dfa8      	RCALL __ANEGW1
000318 9468      	SET
                 __MANDW121:
000319 23ea      	AND  R30,R26
00031a 23fb      	AND  R31,R27
00031b f40e      	BRTC __MANDW122
00031c dfa3      	RCALL __ANEGW1
                 __MANDW122:
00031d 9508      	RET
                 
                 __CHKSIGNW:
00031e 94e8      	CLT
00031f fff7      	SBRS R31,7
000320 c002      	RJMP __CHKSW1
000321 df9e      	RCALL __ANEGW1
000322 9468      	SET
                 __CHKSW1:
000323 ffb7      	SBRS R27,7
000324 c006      	RJMP __CHKSW2
000325 95b1      	NEG  R27
000326 95a1      	NEG  R26
000327 40b0      	SBCI R27,0
000328 f800      	BLD  R0,0
000329 9403      	INC  R0
00032a fa00      	BST  R0,0
                 __CHKSW2:
00032b 9508      	RET
                 
                 __ROUND_REPACK:
00032c 2355      	TST  R21
00032d f442      	BRPL __REPACK
00032e 3850      	CPI  R21,0x80
00032f f411      	BRNE __ROUND_REPACK0
000330 ffe0      	SBRS R30,0
000331 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000332 9631      	ADIW R30,1
000333 1f69      	ADC  R22,R25
000334 1f79      	ADC  R23,R25
000335 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000336 e850      	LDI  R21,0x80
000337 2757      	EOR  R21,R23
000338 f411      	BRNE __REPACK0
000339 935f      	PUSH R21
00033a c0c8      	RJMP __ZERORES
                 __REPACK0:
00033b 3f5f      	CPI  R21,0xFF
00033c f031      	BREQ __REPACK1
00033d 0f66      	LSL  R22
00033e 0c00      	LSL  R0
00033f 9557      	ROR  R21
000340 9567      	ROR  R22
000341 2f75      	MOV  R23,R21
000342 9508      	RET
                 __REPACK1:
000343 935f      	PUSH R21
000344 2000      	TST  R0
000345 f00a      	BRMI __REPACK2
000346 c0c7      	RJMP __MAXRES
                 __REPACK2:
000347 c0c0      	RJMP __MINRES
                 
                 __UNPACK:
000348 e850      	LDI  R21,0x80
000349 2e19      	MOV  R1,R25
00034a 2215      	AND  R1,R21
00034b 0f88      	LSL  R24
00034c 1f99      	ROL  R25
00034d 2795      	EOR  R25,R21
00034e 0f55      	LSL  R21
00034f 9587      	ROR  R24
                 
                 __UNPACK1:
000350 e850      	LDI  R21,0x80
000351 2e07      	MOV  R0,R23
000352 2205      	AND  R0,R21
000353 0f66      	LSL  R22
000354 1f77      	ROL  R23
000355 2775      	EOR  R23,R21
000356 0f55      	LSL  R21
000357 9567      	ROR  R22
000358 9508      	RET
                 
                 __CFD1U:
000359 9468      	SET
00035a c001      	RJMP __CFD1U0
                 __CFD1:
00035b 94e8      	CLT
                 __CFD1U0:
00035c 935f      	PUSH R21
00035d dff2      	RCALL __UNPACK1
00035e 3870      	CPI  R23,0x80
00035f f018      	BRLO __CFD10
000360 3f7f      	CPI  R23,0xFF
000361 f408      	BRCC __CFD10
000362 c0a0      	RJMP __ZERORES
                 __CFD10:
000363 e156      	LDI  R21,22
000364 1b57      	SUB  R21,R23
000365 f4aa      	BRPL __CFD11
000366 9551      	NEG  R21
000367 3058      	CPI  R21,8
000368 f40e      	BRTC __CFD19
000369 3059      	CPI  R21,9
                 __CFD19:
00036a f030      	BRLO __CFD17
00036b efef      	SER  R30
00036c efff      	SER  R31
00036d ef6f      	SER  R22
00036e e77f      	LDI  R23,0x7F
00036f f977      	BLD  R23,7
000370 c01a      	RJMP __CFD15
                 __CFD17:
000371 2777      	CLR  R23
000372 2355      	TST  R21
000373 f0b9      	BREQ __CFD15
                 __CFD18:
000374 0fee      	LSL  R30
000375 1fff      	ROL  R31
000376 1f66      	ROL  R22
000377 1f77      	ROL  R23
000378 955a      	DEC  R21
000379 f7d1      	BRNE __CFD18
00037a c010      	RJMP __CFD15
                 __CFD11:
00037b 2777      	CLR  R23
                 __CFD12:
00037c 3058      	CPI  R21,8
00037d f028      	BRLO __CFD13
00037e 2fef      	MOV  R30,R31
00037f 2ff6      	MOV  R31,R22
000380 2f67      	MOV  R22,R23
000381 5058      	SUBI R21,8
000382 cff9      	RJMP __CFD12
                 __CFD13:
000383 2355      	TST  R21
000384 f031      	BREQ __CFD15
                 __CFD14:
000385 9576      	LSR  R23
000386 9567      	ROR  R22
000387 95f7      	ROR  R31
000388 95e7      	ROR  R30
000389 955a      	DEC  R21
00038a f7d1      	BRNE __CFD14
                 __CFD15:
00038b 2000      	TST  R0
00038c f40a      	BRPL __CFD16
00038d df36      	RCALL __ANEGD1
                 __CFD16:
00038e 915f      	POP  R21
00038f 9508      	RET
                 
                 __CDF1U:
000390 9468      	SET
000391 c001      	RJMP __CDF1U0
                 __CDF1:
000392 94e8      	CLT
                 __CDF1U0:
000393 9730      	SBIW R30,0
000394 4060      	SBCI R22,0
000395 4070      	SBCI R23,0
000396 f0b1      	BREQ __CDF10
000397 2400      	CLR  R0
000398 f026      	BRTS __CDF11
000399 2377      	TST  R23
00039a f412      	BRPL __CDF11
00039b 9400      	COM  R0
00039c df27      	RCALL __ANEGD1
                 __CDF11:
00039d 2e17      	MOV  R1,R23
00039e e17e      	LDI  R23,30
00039f 2011      	TST  R1
                 __CDF12:
0003a0 f032      	BRMI __CDF13
0003a1 957a      	DEC  R23
0003a2 0fee      	LSL  R30
0003a3 1fff      	ROL  R31
0003a4 1f66      	ROL  R22
0003a5 1c11      	ROL  R1
0003a6 cff9      	RJMP __CDF12
                 __CDF13:
0003a7 2fef      	MOV  R30,R31
0003a8 2ff6      	MOV  R31,R22
0003a9 2d61      	MOV  R22,R1
0003aa 935f      	PUSH R21
0003ab df8a      	RCALL __REPACK
0003ac 915f      	POP  R21
                 __CDF10:
0003ad 9508      	RET
                 
                 __SWAPACC:
0003ae 934f      	PUSH R20
0003af 01af      	MOVW R20,R30
0003b0 01fd      	MOVW R30,R26
0003b1 01da      	MOVW R26,R20
0003b2 01ab      	MOVW R20,R22
0003b3 01bc      	MOVW R22,R24
0003b4 01ca      	MOVW R24,R20
0003b5 2d40      	MOV  R20,R0
0003b6 2c01      	MOV  R0,R1
0003b7 2e14      	MOV  R1,R20
0003b8 914f      	POP  R20
0003b9 9508      	RET
                 
                 __UADD12:
0003ba 0fea      	ADD  R30,R26
0003bb 1ffb      	ADC  R31,R27
0003bc 1f68      	ADC  R22,R24
0003bd 9508      	RET
                 
                 __NEGMAN1:
0003be 95e0      	COM  R30
0003bf 95f0      	COM  R31
0003c0 9560      	COM  R22
0003c1 5fef      	SUBI R30,-1
0003c2 4fff      	SBCI R31,-1
0003c3 4f6f      	SBCI R22,-1
0003c4 9508      	RET
                 
                 __ADDF12:
0003c5 935f      	PUSH R21
0003c6 df81      	RCALL __UNPACK
0003c7 3890      	CPI  R25,0x80
0003c8 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0003c9 3870      	CPI  R23,0x80
0003ca f121      	BREQ __ADDF128
                 __ADDF121:
0003cb 2f57      	MOV  R21,R23
0003cc 1b59      	SUB  R21,R25
0003cd f12b      	BRVS __ADDF1211
0003ce f412      	BRPL __ADDF122
0003cf dfde      	RCALL __SWAPACC
0003d0 cffa      	RJMP __ADDF121
                 __ADDF122:
0003d1 3158      	CPI  R21,24
0003d2 f018      	BRLO __ADDF123
0003d3 27aa      	CLR  R26
0003d4 27bb      	CLR  R27
0003d5 2788      	CLR  R24
                 __ADDF123:
0003d6 3058      	CPI  R21,8
0003d7 f028      	BRLO __ADDF124
0003d8 2fab      	MOV  R26,R27
0003d9 2fb8      	MOV  R27,R24
0003da 2788      	CLR  R24
0003db 5058      	SUBI R21,8
0003dc cff9      	RJMP __ADDF123
                 __ADDF124:
0003dd 2355      	TST  R21
0003de f029      	BREQ __ADDF126
                 __ADDF125:
0003df 9586      	LSR  R24
0003e0 95b7      	ROR  R27
0003e1 95a7      	ROR  R26
0003e2 955a      	DEC  R21
0003e3 f7d9      	BRNE __ADDF125
                 __ADDF126:
0003e4 2d50      	MOV  R21,R0
0003e5 2551      	EOR  R21,R1
0003e6 f072      	BRMI __ADDF127
0003e7 dfd2      	RCALL __UADD12
0003e8 f438      	BRCC __ADDF129
0003e9 9567      	ROR  R22
0003ea 95f7      	ROR  R31
0003eb 95e7      	ROR  R30
0003ec 9573      	INC  R23
0003ed f413      	BRVC __ADDF129
0003ee c01f      	RJMP __MAXRES
                 __ADDF128:
0003ef dfbe      	RCALL __SWAPACC
                 __ADDF129:
0003f0 df45      	RCALL __REPACK
0003f1 915f      	POP  R21
0003f2 9508      	RET
                 __ADDF1211:
0003f3 f7d8      	BRCC __ADDF128
0003f4 cffb      	RJMP __ADDF129
                 __ADDF127:
0003f5 1bea      	SUB  R30,R26
0003f6 0bfb      	SBC  R31,R27
0003f7 0b68      	SBC  R22,R24
0003f8 f051      	BREQ __ZERORES
0003f9 f410      	BRCC __ADDF1210
0003fa 9400      	COM  R0
0003fb dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
0003fc 2366      	TST  R22
0003fd f392      	BRMI __ADDF129
0003fe 0fee      	LSL  R30
0003ff 1fff      	ROL  R31
000400 1f66      	ROL  R22
000401 957a      	DEC  R23
000402 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000403 27ee      	CLR  R30
000404 27ff      	CLR  R31
000405 01bf      	MOVW R22,R30
000406 915f      	POP  R21
000407 9508      	RET
                 
                 __MINRES:
000408 efef      	SER  R30
000409 efff      	SER  R31
00040a e76f      	LDI  R22,0x7F
00040b ef7f      	SER  R23
00040c 915f      	POP  R21
00040d 9508      	RET
                 
                 __MAXRES:
00040e efef      	SER  R30
00040f efff      	SER  R31
000410 e76f      	LDI  R22,0x7F
000411 e77f      	LDI  R23,0x7F
000412 915f      	POP  R21
000413 9508      	RET
                 
                 __MULF12:
000414 935f      	PUSH R21
000415 df32      	RCALL __UNPACK
000416 3870      	CPI  R23,0x80
000417 f359      	BREQ __ZERORES
000418 3890      	CPI  R25,0x80
000419 f349      	BREQ __ZERORES
00041a 2401      	EOR  R0,R1
00041b 9408      	SEC
00041c 1f79      	ADC  R23,R25
00041d f423      	BRVC __MULF124
00041e f324      	BRLT __ZERORES
                 __MULF125:
00041f 2000      	TST  R0
000420 f33a      	BRMI __MINRES
000421 cfec      	RJMP __MAXRES
                 __MULF124:
000422 920f      	PUSH R0
000423 931f      	PUSH R17
000424 932f      	PUSH R18
000425 933f      	PUSH R19
000426 934f      	PUSH R20
000427 2711      	CLR  R17
000428 2722      	CLR  R18
000429 2799      	CLR  R25
00042a 9f68      	MUL  R22,R24
00042b 01a0      	MOVW R20,R0
00042c 9f8f      	MUL  R24,R31
00042d 2d30      	MOV  R19,R0
00042e 0d41      	ADD  R20,R1
00042f 1f59      	ADC  R21,R25
000430 9f6b      	MUL  R22,R27
000431 0d30      	ADD  R19,R0
000432 1d41      	ADC  R20,R1
000433 1f59      	ADC  R21,R25
000434 9f8e      	MUL  R24,R30
000435 d027      	RCALL __MULF126
000436 9fbf      	MUL  R27,R31
000437 d025      	RCALL __MULF126
000438 9f6a      	MUL  R22,R26
000439 d023      	RCALL __MULF126
00043a 9fbe      	MUL  R27,R30
00043b d01d      	RCALL __MULF127
00043c 9faf      	MUL  R26,R31
00043d d01b      	RCALL __MULF127
00043e 9fae      	MUL  R26,R30
00043f 0d11      	ADD  R17,R1
000440 1f29      	ADC  R18,R25
000441 1f39      	ADC  R19,R25
000442 1f49      	ADC  R20,R25
000443 1f59      	ADC  R21,R25
000444 2fe3      	MOV  R30,R19
000445 2ff4      	MOV  R31,R20
000446 2f65      	MOV  R22,R21
000447 2f52      	MOV  R21,R18
000448 914f      	POP  R20
000449 913f      	POP  R19
00044a 912f      	POP  R18
00044b 911f      	POP  R17
00044c 900f      	POP  R0
00044d 2366      	TST  R22
00044e f02a      	BRMI __MULF122
00044f 0f55      	LSL  R21
000450 1fee      	ROL  R30
000451 1fff      	ROL  R31
000452 1f66      	ROL  R22
000453 c002      	RJMP __MULF123
                 __MULF122:
000454 9573      	INC  R23
000455 f24b      	BRVS __MULF125
                 __MULF123:
000456 ded5      	RCALL __ROUND_REPACK
000457 915f      	POP  R21
000458 9508      	RET
                 
                 __MULF127:
000459 0d10      	ADD  R17,R0
00045a 1d21      	ADC  R18,R1
00045b 1f39      	ADC  R19,R25
00045c c002      	RJMP __MULF128
                 __MULF126:
00045d 0d20      	ADD  R18,R0
00045e 1d31      	ADC  R19,R1
                 __MULF128:
00045f 1f49      	ADC  R20,R25
000460 1f59      	ADC  R21,R25
000461 9508      	RET
                 
                 _delay_ms:
000462 9610      	adiw r26,0
000463 f039      	breq __delay_ms1
                 __delay_ms0:
000464 95a8      	wdr
                +
000465 e686     +LDI R24 , LOW ( 0xE66 )
000466 e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
000467 9701     +SBIW R24 , 1
000468 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
000469 9711      	sbiw r26,1
00046a f7c9      	brne __delay_ms0
                 __delay_ms1:
00046b 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  48 r1 :  21 r2 :   0 r3 :   0 r4 :   0 r5 :   3 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  28 r17:  31 r18:  20 r19:  27 r20:  32 r21:  59 r22:  47 r23:  36 
r24:  31 r25:  26 r26: 121 r27:  56 r28:   5 r29:   2 r30: 224 r31: 107 
x  :   4 y  :  56 z  :   9 
Registers used: 22 out of 35 (62.9%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  22 add   :  18 
adiw  :   8 and   :   6 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  16 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 
brlt  :   4 brmi  :   6 brne  :  37 brpl  :   5 brsh  :   3 brtc  :   5 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   1 call  :   0 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  22 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :   8 
cp    :   7 cpc   :  24 cpi   :  34 cpse  :   0 dec   :  10 des   :   0 
elpm  :   0 eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   2 inc   :   3 jmp   :  36 ld    :   7 ldd   :  22 
ldi   : 176 lds   :   6 lpm   :   8 lsl   :  14 lsr   :   2 mov   :  54 
movw  :  40 mul   :  16 muls  :   0 mulsu :   0 neg   :   8 nop   :   1 
or    :   0 ori   :   2 out   :  26 pop   :  15 push  :  14 rcall :  98 
ret   :  37 reti  :   1 rjmp  :  54 rol   :  17 ror   :  12 sbc   :   4 
sbci  :  16 sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :  10 sbr   :   1 
sbrc  :   1 sbrs  :   5 sec   :   1 seh   :   0 sei   :   0 sen   :   0 
ser   :   8 ses   :   0 set   :   5 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  14 std   :  18 sts   :   5 sub   :   4 subi  :  14 
swap  :   0 tst   :  11 wdr   :   1 
Instructions used: 69 out of 117 (59.0%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008d8   2208     56   2264  131072   1.7%
[.dseg] 0x000100 0x000518      0     24     24    4096   0.6%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 3 warnings
