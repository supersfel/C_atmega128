;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0

	.DSEG
;void PORT_Init(void)
; 0000 0013 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0014 DDRE=0xF0; //FND 출력을 위한 설정
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0015 DDRF=0xFF; //FND 출력을 위한 설정
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0016 DDRC=0x0F; //키패드를 위한 설정
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0017 DDRG=0x10; //부저 출력을 위한 설정
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0018 DDRB=0x20; //서브모터 출력을 위한 설정
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0019 PORTC=0xFF;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 001A }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;void Init_Timer1(void)
; 0000 001D {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 001E 
; 0000 001F TCCR1A = (1<<COM1A1) | (1<<WGM11);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0020 TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS11);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0021 TCNT1 = 0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0022 ICR1 = 36864-1; // TOP 값 : 36864-> 20ms(0.542us X 36864), 0~36863
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0023 OCR1A =2765 ; // 초기 시작 위치 0도
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0024 TIMSK |= (1<<OCIE1A); // Output Compare Match Interrupt 허가
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0025 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;interrupt [13] void compare(void)
; 0000 0028 {
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0029 #asm("nop"); //비교일치 인터럽트 구문
;PCODE: $00000030 VOL: 0
; 0000 002A }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;void myDelay_us(unsigned int delay)
; 0000 002D 
; 0000 002E {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 002F unsigned int loop;
; 0000 0030 for(loop=0; loop<delay; loop++)
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;	delay -> R18,R19
;	loop -> R16,R17
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0031 delay_us(1);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0032 }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;void Buzzer_play(unsigned int delay)
; 0000 0036 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0037 unsigned int loop;
; 0000 0038 unsigned char Play_Tim=0;
; 0000 0039 Play_Tim = 10000/delay;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;	delay -> R20,R21
;	loop -> R16,R17
;	Play_Tim -> R19
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 003A for(loop=0; loop<Play_Tim; loop++)
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 003B {
; 0000 003C PORTG |= 1<<4; //buzzer off, PORTG의 4번 핀 on(out 1)
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 003D myDelay_us(delay);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 003E PORTG &= ~(1<<4); //buzzer on, PORTG의 4번 핀 off(out 0)
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 003F myDelay_us(delay);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0040 }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0041 }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;unsigned char KeyScan(void)
; 0000 0044 {
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0045 unsigned int key_scan_line = 0xFE;
; 0000 0046 unsigned char key_scan_loop =0, getPinData =0;
; 0000 0047 unsigned int key_num =0;
; 0000 0048 for(key_scan_loop =0; key_scan_loop <4;key_scan_loop++)
;PCODE: $00000075 VOL: 0
;	key_scan_line -> R16,R17
;	key_scan_loop -> R19
;	getPinData -> R18
;	key_num -> R20,R21
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0049 {
; 0000 004A PORTC = key_scan_line;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 004B delay_us(1);
;PCODE: $00000089 VOL: 0
; 0000 004C getPinData = PINC & 0xF0;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 004D if(getPinData != 0x00)
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 004E {
; 0000 004F switch(getPinData)
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0050 {
; 0000 0051 case 0x10:
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0052 key_num = key_scan_loop * 4 +1 ;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0053 break;
;PCODE: $00000098 VOL: 0
; 0000 0054 case 0x20:
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0055 key_num = key_scan_loop * 4 +2 ;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0056 break;
;PCODE: $000000A1 VOL: 0
; 0000 0057 case 0x40:
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0058 key_num = key_scan_loop * 4 +3 ;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0059 break;
;PCODE: $000000AA VOL: 0
; 0000 005A case 0x80:
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 005B key_num = key_scan_loop * 4 +4 ;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 005C break;
;PCODE: $000000B3 VOL: 0
; 0000 005D }
;PCODE: $000000B4 VOL: 0
; 0000 005E return key_num;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 005F }
; 0000 0060 key_scan_line = (key_scan_line <<1);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0061 }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0062 
; 0000 0063 }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;unsigned char Changenum(unsigned char num)
; 0000 0065 {
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0066 
; 0000 0067 unsigned char return_num=0;
; 0000 0068 if(num ==0){
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;	num -> R16
;	return_num -> R17
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0069 return_num =0;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 006A }
; 0000 006B else if (num%4 ==0){         // 1 2 3 13
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 006C return_num = 12 + num/4;   // 4 5 6 14
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 006D // 7 8 9 15
; 0000 006E }                             // 10 0 12 16
; 0000 006F else if( num/4 ==0){ // 위처럼 인식되게 변환
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0070 return_num = (4*(num/4) +num%4) ;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0071 }
; 0000 0072 else if( num/4 ==1){
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0073 return_num = (4*(num/4) +num%4) -1 ;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0074 }
; 0000 0075 else if( num/4 ==2){
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0076 return_num = (4*(num/4) +num%4) -2 ;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0077 }
; 0000 0078 else if( num/4 ==3){
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0079 return_num = (4*(num/4) +num%4) -3 ;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 007A }
; 0000 007B if (return_num ==11){
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 007C return_num =0;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 007D zero_flag =1; // 아무것도 누르지 않을때도 0이 저장되기에
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 007E // 0을 누를때 zero_flag동작되게 설정
; 0000 007F 
; 0000 0080 
; 0000 0081 
; 0000 0082 }
; 0000 0083 return return_num;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0084 
; 0000 0085 
; 0000 0086 
; 0000 0087 }
;PCODE: $00000144 VOL: 0
;void OUTFND( unsigned int t)
; 0000 008C {
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 008D unsigned char FND0, FND1, FND2, FND3;
; 0000 008E // 숫자 t를 받아서 FND에 출력하는 함수
; 0000 008F FND3 = t/1000;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;	t -> R20,R21
;	FND0 -> R17
;	FND1 -> R16
;	FND2 -> R19
;	FND3 -> R18
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0090 FND2 = (t%1000)/100;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0091 FND1 = (t%100)/10;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0092 FND0 = t%10;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0093 PORTE = Port_fnd[0];
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0094 PORTF = Port_char[FND0]; //1의자리
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0095 delay_ms(10);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0096 PORTE = Port_fnd[1];
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0097 PORTF = Port_char[FND1]; //10의자리
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0098 delay_ms(10);
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0099 PORTE = Port_fnd[2];
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 009A PORTF = Port_char[FND2]; //100의 자리
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 009B delay_ms(10);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 009C PORTE = Port_fnd[3]; //1000의 자리
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 009D PORTF = Port_char[FND3];
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 009E delay_ms(10);
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 009F }
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;void main (void)
; 0000 00A2 {
;PCODE: $0000018E VOL: 0
; 0000 00A3 int t=0; //키패드로 받은 숫자
; 0000 00A4 int count =0; //count 변수
; 0000 00A5 int finalnum=0; //FND에 출력으로 넣어줄 변수
; 0000 00A6 int fnd[4]={0,0,0,0};
; 0000 00A7 signed int angle=0; // 서브모터 각도로 넣을 변수
; 0000 00A8 Init_Timer1(); // 타이머 초기설정
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;	t -> R16,R17
;	count -> R18,R19
;	finalnum -> R20,R21
;	fnd -> Y+2
;	angle -> Y+0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00A9 PORT_Init(); // 포트들 입출력 초기 설정
;PCODE: $0000019C VOL: 0
; 0000 00AA while(1)
;PCODE: $0000019D VOL: 0
; 0000 00AB {
; 0000 00AC t= Changenum(KeyScan());
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 00AD if(t<10 & t>0 ) //숫자가 눌리면 새로운 값을 저장하도록 count값 설정
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 00AE {
; 0000 00AF count++;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 00B0 delay_ms(50);
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00B1 }
; 0000 00B2 else if(t==0 & zero_flag) //zero_flag가 실행된 경우에만 0으로 입력
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 00B3 {
; 0000 00B4 count++;
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00B5 zero_flag =0; //계속 0으로 입력된 상태가 안되게 zero_flag를 다시 0으로
;PCODE: $000001BA VOL: 0
; 0000 00B6 delay_ms(50);
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 00B7 }
; 0000 00B8 else if(t==13) // FND 출력숫자 리셋버튼 기능
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00B9 {
; 0000 00BA fnd[0]=0;
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 00BB fnd[1]=0;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 00BC fnd[2]=0;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 00BD fnd[3]=0;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 00BE }
; 0000 00BF else if (t ==14) //현재 FND의 숫자각도만큼 모터각도 변경
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 00C0 {
; 0000 00C1 angle = finalnum%360;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 00C2 if(angle >= 180){ //예제 모터는 90도까지만되나 180도 이상은
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00C3 angle -= 360; //-각도로 생각
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 00C4 }
; 0000 00C5 OCR1A = 2765 + 10.249*angle; //1도단위까지도 입력 가능
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 00C6 }
; 0000 00C7 if((count%2) ==0){ //count가 짝수일때 들어온 t값을 저장하고
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 00C8 //다시 count를 홀수로 만듬
; 0000 00C9 fnd[3] = fnd[2];
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 00CA delay_ms(50);
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 00CB fnd[2] = fnd[1];
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 00CC delay_ms(50);
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 00CD fnd[1] = fnd[0];
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 00CE delay_ms(50);
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 00CF fnd[0] = t;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 00D0 count++;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 00D1 delay_ms(50);
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 00D2 }
; 0000 00D3 finalnum = 1000*fnd[3] + 100*fnd[2] + 10*fnd[1] + fnd[0];
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 00D4 OUTFND(finalnum);
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 00D5 switch(t) //각 키패드마다 나오는 음 설정
;PCODE: $00000215 VOL: 0
; 0000 00D6 {
; 0000 00D7 case 1:
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 00D8 Buzzer_play(Do);
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 00D9 break;
;PCODE: $0000021B VOL: 0
; 0000 00DA case 2:
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 00DB Buzzer_play(Re);
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 00DC break;
;PCODE: $00000222 VOL: 0
; 0000 00DD case 3:
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 00DE Buzzer_play(Mi);
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 00DF break;
;PCODE: $00000229 VOL: 0
; 0000 00E0 case 4:
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 00E1 Buzzer_play(Fa);
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 00E2 break;
;PCODE: $00000230 VOL: 0
; 0000 00E3 case 5:
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 00E4 Buzzer_play(Sol);
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 00E5 break;
;PCODE: $00000237 VOL: 0
; 0000 00E6 case 6:
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 00E7 Buzzer_play(La);
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 00E8 break;
;PCODE: $0000023E VOL: 0
; 0000 00E9 case 7:
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 00EA Buzzer_play(Si);
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 00EB break;
;PCODE: $00000245 VOL: 0
; 0000 00EC case 8:
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 00ED Buzzer_play(Do/2);
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 00EE break;
;PCODE: $0000024C VOL: 0
; 0000 00EF case 9:
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 00F0 Buzzer_play(Re/2);
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 00F1 break;
;PCODE: $00000253 VOL: 0
; 0000 00F2 default:
;PCODE: $00000254 VOL: 0
; 0000 00F3 break;
;PCODE: $00000255 VOL: 0
; 0000 00F4 }
;PCODE: $00000256 VOL: 0
; 0000 00F5 }
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 00F6 }
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
