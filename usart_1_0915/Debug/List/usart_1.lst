
AVRASM ver. 2.1.30  C:\Users\정민규\Desktop\마이크로프로세서2\usart_1_0915\Debug\List\usart_1.asm Wed Sep 15 18:04:31 2021

C:\Users\정민규\Desktop\마이크로프로세서2\usart_1_0915\Debug\List\usart_1.asm(1416): warning: Register r5 already defined by the .DEF directive
C:\Users\정민규\Desktop\마이크로프로세서2\usart_1_0915\Debug\List\usart_1.asm(1417): warning: Register r6 already defined by the .DEF directive
C:\Users\정민규\Desktop\마이크로프로세서2\usart_1_0915\Debug\List\usart_1.asm(1418): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.45 
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 14.745600 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _buffer_count=R5
                 	.DEF _Status=R6
                 	.DEF _Status_msb=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0070 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0121 	JMP  _usart1_receive
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000046 0000
C:\Users\정민규\Desktop\마이크로프로세서2\usart_1_0915\Debug\List\usart_1.asm(1465): warning: .cseg .db misalignment - padding zero byte
000047 0000      	.DB  0x0,0x0,0x0
                 
                 _0x2D:
000048 7250
000049 7365
00004a 2073
00004b 6863      	.DB  0x50,0x72,0x65,0x73,0x73,0x20,0x63,0x68
00004c 7261
00004d 4526
00004e 746e
00004f 7265      	.DB  0x61,0x72,0x26,0x45,0x6E,0x74,0x65,0x72
                 _0x2E:
000050 614d
000051 2078
000052 656c
000053 676e      	.DB  0x4D,0x61,0x78,0x20,0x6C,0x65,0x6E,0x67
000054 6874
000055 6520
000056 7272
000057 726f      	.DB  0x74,0x68,0x20,0x65,0x72,0x72,0x6F,0x72
                 _0x0:
000058 2020
000059 2020
00005a 2020
00005b 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00005c 2020
00005d 2020
00005e 2020
00005f 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000060 2020
000061 2020
C:\Users\정민규\Desktop\마이크로프로세서2\usart_1_0915\Debug\List\usart_1.asm(1476): warning: .cseg .db misalignment - padding zero byte
000062 0000      	.DB  0x20,0x20,0x20,0x20,0x0
                 
                 __GLOBAL_INI_TBL:
000063 0003      	.DW  0x03
000064 0005      	.DW  0x05
000065 008c      	.DW  __REG_VARS*2
                 
000066 0015      	.DW  0x15
000067 0500      	.DW  _0xA
000068 00b0      	.DW  _0x0*2
                 
000069 0010      	.DW  0x10
00006a 0515      	.DW  _Intro_msg
00006b 0090      	.DW  _0x2D*2
                 
00006c 0010      	.DW  0x10
00006d 0526      	.DW  _Error_msg
00006e 00a0      	.DW  _0x2E*2
                 
                 _0xFFFFFFFF:
00006f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000070 94f8      	CLI
000071 27ee      	CLR  R30
000072 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000073 e0f1      	LDI  R31,1
000074 bff5      	OUT  MCUCR,R31
000075 bfe5      	OUT  MCUCR,R30
000076 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000078 e08d      	LDI  R24,(14-2)+1
000079 e0a2      	LDI  R26,2
00007a 27bb      	CLR  R27
                 __CLEAR_REG:
00007b 93ed      	ST   X+,R30
00007c 958a      	DEC  R24
00007d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00007e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00007f e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000080 e0a0      	LDI  R26,LOW(__SRAM_START)
000081 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000082 93ed      	ST   X+,R30
000083 9701      	SBIW R24,1
000084 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000085 ece6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000086 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000087 9185      	LPM  R24,Z+
000088 9195      	LPM  R25,Z+
000089 9700      	SBIW R24,0
00008a f061      	BREQ __GLOBAL_INI_END
00008b 91a5      	LPM  R26,Z+
00008c 91b5      	LPM  R27,Z+
00008d 9005      	LPM  R0,Z+
00008e 9015      	LPM  R1,Z+
00008f 01bf      	MOVW R22,R30
000090 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000091 9005      	LPM  R0,Z+
000092 920d      	ST   X+,R0
000093 9701      	SBIW R24,1
000094 f7e1      	BRNE __GLOBAL_INI_LOOP
000095 01fb      	MOVW R30,R22
000096 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000097 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000098 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000099 bfed      	OUT  SPL,R30
00009a e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00009b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00009c e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00009d e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00009e 940c 0155 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 
                 	.CSEG
                 _LCD_PORT_Init:
                 ; .FSTART _LCD_PORT_Init
0000a0 efef      	LDI  R30,LOW(255)
0000a1 bbea      	OUT  0x1A,R30
0000a2 e1ef      	LDI  R30,LOW(31)
0000a3 93e0 0064 	STS  100,R30
0000a5 9508      	RET
                 ; .FEND
                 _LCD_Data:
                 ; .FSTART _LCD_Data
0000a6 d12c      	RCALL SUBOPT_0x0
                 ;	ch -> R17
0000a7 60e4      	ORI  R30,4
0000a8 d12f      	RCALL SUBOPT_0x1
0000a9 7fed      	ANDI R30,0xFD
0000aa d12d      	RCALL SUBOPT_0x1
0000ab d131      	RCALL SUBOPT_0x2
0000ac c01a      	RJMP _0x2000003
                 ; .FEND
                 _LCD_Comm:
                 ; .FSTART _LCD_Comm
0000ad d125      	RCALL SUBOPT_0x0
                 ;	ch -> R17
0000ae 7feb      	ANDI R30,0xFB
0000af d128      	RCALL SUBOPT_0x1
0000b0 7fed      	ANDI R30,0xFD
0000b1 d126      	RCALL SUBOPT_0x1
0000b2 d12a      	RCALL SUBOPT_0x2
0000b3 c013      	RJMP _0x2000003
                 ; .FEND
                 _LCD_delay:
                 ; .FSTART _LCD_delay
0000b4 931a      	ST   -Y,R17
0000b5 2f1a      	MOV  R17,R26
                 ;	ms -> R17
0000b6 27bb      	CLR  R27
0000b7 c00e      	RJMP _0x2000002
                 ; .FEND
                 _LCD_Pos:
                 ; .FSTART _LCD_Pos
0000b8 d134      	RCALL SUBOPT_0x3
                 ;	col -> R16
                 ;	row -> R17
0000b9 e4a0      	LDI  R26,LOW(64)
0000ba 020a      	MULS R16,R26
0000bb 01f0      	MOVW R30,R0
0000bc 0fe1      	ADD  R30,R17
0000bd 68e0      	ORI  R30,0x80
0000be 2fae      	MOV  R26,R30
0000bf dfed      	RCALL _LCD_Comm
0000c0 c05c      	RJMP _0x2000001
                 ; .FEND
                 _LCD_Char:
                 ; .FSTART _LCD_Char
0000c1 931a      	ST   -Y,R17
0000c2 2f1a      	MOV  R17,R26
                 ;	c -> R17
0000c3 dfe2      	RCALL _LCD_Data
0000c4 e0a1      	LDI  R26,LOW(1)
0000c5 e0b0      	LDI  R27,0
                 _0x2000002:
0000c6 d13d      	RCALL _delay_ms
                 _0x2000003:
0000c7 9119      	LD   R17,Y+
0000c8 9508      	RET
                 ; .FEND
                 _LCD_Str:
                 ; .FSTART _LCD_Str
0000c9 931a      	ST   -Y,R17
0000ca 930a      	ST   -Y,R16
0000cb 018d      	MOVW R16,R26
                 ;	*str -> R16,R17
                 _0x3:
0000cc 01d8      	MOVW R26,R16
0000cd 91ec      	LD   R30,X
0000ce 30e0      	CPI  R30,0
0000cf f029      	BREQ _0x5
0000d0 91ac      	LD   R26,X
0000d1 dfef      	RCALL _LCD_Char
                +
0000d2 5f0f     +SUBI R16 , LOW ( - 1 )
0000d3 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000d4 cff7      	RJMP _0x3
                 _0x5:
0000d5 9109      	LD   R16,Y+
0000d6 9119      	LD   R17,Y+
0000d7 9508      	RET
                 ; .FEND
                 ;	*str -> R18,R19
                 ;	loop_count -> R17
                 
                 	.DSEG
                 _0xA:
000500           	.BYTE 0x15
                 
                 	.CSEG
                 _LCD_Clear:
                 ; .FSTART _LCD_Clear
0000d8 e0a1      	LDI  R26,LOW(1)
0000d9 dfd3      	RCALL _LCD_Comm
0000da e0a2      	LDI  R26,LOW(2)
0000db dfd8      	RCALL _LCD_delay
0000dc 9508      	RET
                 ; .FEND
                 _LCD_Init:
                 ; .FSTART _LCD_Init
0000dd dfc2      	RCALL _LCD_PORT_Init
0000de d113      	RCALL SUBOPT_0x4
0000df d112      	RCALL SUBOPT_0x4
0000e0 d111      	RCALL SUBOPT_0x4
0000e1 e0ae      	LDI  R26,LOW(14)
0000e2 dfca      	RCALL _LCD_Comm
0000e3 e0a4      	LDI  R26,LOW(4)
0000e4 dfcf      	RCALL _LCD_delay
0000e5 e0a6      	LDI  R26,LOW(6)
0000e6 dfc6      	RCALL _LCD_Comm
0000e7 e0a4      	LDI  R26,LOW(4)
0000e8 dfcb      	RCALL _LCD_delay
0000e9 dfee      	RCALL _LCD_Clear
0000ea 9508      	RET
                 ; .FEND
                 ;	p -> R17
                 ;	p -> R17
                 ;	baud -> R17
                 _Init_USART1_IntCon:
                 ; .FSTART _Init_USART1_IntCon
0000eb d101      	RCALL SUBOPT_0x3
                 ;	baud -> R16
                 ;	Int_type -> R17
0000ec e0e0      	LDI  R30,LOW(0)
0000ed 93e0 009b 	STS  155,R30
0000ef e9e8      	LDI  R30,LOW(152)
0000f0 93e0 009a 	STS  154,R30
0000f2 2fe0      	MOV  R30,R16
0000f3 e0f0      	LDI  R31,0
0000f4 9730      	SBIW R30,0
0000f5 f439      	BRNE _0x1B
0000f6 e0e0      	LDI  R30,LOW(0)
0000f7 93e0 0098 	STS  152,R30
0000f9 e5ef      	LDI  R30,LOW(95)
0000fa 93e0 0099 	STS  153,R30
0000fc c00a      	RJMP _0x1A
                 _0x1B:
0000fd 30e1      	CPI  R30,LOW(0x1)
0000fe e0a0      	LDI  R26,HIGH(0x1)
0000ff 07fa      	CPC  R31,R26
000100 f431      	BRNE _0x1D
000101 e0e0      	LDI  R30,LOW(0)
000102 93e0 0098 	STS  152,R30
000104 e0e7      	LDI  R30,LOW(7)
000105 93e0 0099 	STS  153,R30
                 _0x1D:
                 _0x1A:
000107 2fe1      	MOV  R30,R17
000108 e0f0      	LDI  R31,0
000109 9730      	SBIW R30,0
00010a f411      	BRNE _0x21
00010b e9e8      	LDI  R30,LOW(152)
00010c c00b      	RJMP _0x4E
                 _0x21:
00010d 30e1      	CPI  R30,LOW(0x1)
00010e e0a0      	LDI  R26,HIGH(0x1)
00010f 07fa      	CPC  R31,R26
000110 f411      	BRNE _0x22
000111 e3e8      	LDI  R30,LOW(56)
000112 c005      	RJMP _0x4E
                 _0x22:
000113 30e2      	CPI  R30,LOW(0x2)
000114 e0a0      	LDI  R26,HIGH(0x2)
000115 07fa      	CPC  R31,R26
000116 f419      	BRNE _0x20
000117 ebe8      	LDI  R30,LOW(184)
                 _0x4E:
000118 93e0 009a 	STS  154,R30
                 _0x20:
00011a e0e6      	LDI  R30,LOW(6)
00011b 93e0 009d 	STS  157,R30
                 _0x2000001:
00011d 8119      	LDD  R17,Y+1
00011e 8108      	LDD  R16,Y+0
00011f 9623      	ADIW R28,3
000120 9508      	RET
                 ; .FEND
                 ;	data -> R17
                 ;	*str -> R16,R17
                 
                 	.DSEG
                 ;interrupt [31] void usart1_receive(void)
                 ; 0000 001F {
                 
                 	.CSEG
                 _usart1_receive:
                 ; .FSTART _usart1_receive
000121 93aa      	ST   -Y,R26
000122 93ba      	ST   -Y,R27
000123 93ea      	ST   -Y,R30
000124 93fa      	ST   -Y,R31
000125 b7ef      	IN   R30,SREG
000126 93ea      	ST   -Y,R30
                 ; 0000 0020 Current_str[buffer_count] = UDR1;
000127 2da5      	MOV  R26,R5
000128 e0b0      	LDI  R27,0
000129 5ca9      	SUBI R26,LOW(-_Current_str)
00012a 4fba      	SBCI R27,HIGH(-_Current_str)
00012b 91e0 009c 	LDS  R30,156
00012d 93ec      	ST   X,R30
                 ; 0000 0021 PORTB ^= 1<<0;
00012e b3e8      	IN   R30,0x18
00012f e0a1      	LDI  R26,LOW(1)
000130 27ea      	EOR  R30,R26
000131 bbe8      	OUT  0x18,R30
                 ; 0000 0022 // 특수문자이면 문자를 처리하지 않고,
                 ; 0000 0023 if(Current_str[buffer_count] == ENTER){
000132 d0c3      	RCALL SUBOPT_0x5
000133 81a0      	LD   R26,Z
000134 30ad      	CPI  R26,LOW(0xD)
000135 f441      	BRNE _0x2F
                 ; 0000 0024 Status = STATUS3_KEY_INPUT_END;
000136 e0e3      	LDI  R30,LOW(3)
000137 e0f0      	LDI  R31,HIGH(3)
000138 013f      	MOVW R6,R30
                 ; 0000 0025 PORTB ^= 1<<1;
000139 b3e8      	IN   R30,0x18
00013a e0a2      	LDI  R26,LOW(2)
00013b 27ea      	EOR  R30,R26
00013c bbe8      	OUT  0x18,R30
                 ; 0000 0026 }
                 ; 0000 0027 else
00013d c010      	RJMP _0x30
                 _0x2F:
                 ; 0000 0028 // max length(16문자)를 초과하면 error flag 설정
                 ; 0000 0029 {
                 ; 0000 002A if(buffer_count == MAXLEN)
00013e e1e1      	LDI  R30,LOW(17)
00013f 15e5      	CP   R30,R5
000140 f421      	BRNE _0x31
                 ; 0000 002B {
                 ; 0000 002C Status = STATUS10_ERROR;
000141 e0ea      	LDI  R30,LOW(10)
000142 e0f0      	LDI  R31,HIGH(10)
000143 013f      	MOVW R6,R30
                 ; 0000 002D }
                 ; 0000 002E else
000144 c009      	RJMP _0x32
                 _0x31:
                 ; 0000 002F {
                 ; 0000 0030 if(buffer_count == 0)   Status = STATUS1_FIRST_KEY_INPUT;
000145 2055      	TST  R5
000146 f419      	BRNE _0x33
000147 e0e1      	LDI  R30,LOW(1)
000148 e0f0      	LDI  R31,HIGH(1)
000149 c002      	RJMP _0x4F
                 ; 0000 0031 else                    Status = STATUS2_KEY_INPUT;
                 _0x33:
00014a e0e2      	LDI  R30,LOW(2)
00014b e0f0      	LDI  R31,HIGH(2)
                 _0x4F:
00014c 013f      	MOVW R6,R30
                 ; 0000 0032 buffer_count++;
00014d 9453      	INC  R5
                 ; 0000 0033 }
                 _0x32:
                 ; 0000 0034 }
                 _0x30:
                 ; 0000 0035 }
00014e 91e9      	LD   R30,Y+
00014f bfef      	OUT  SREG,R30
000150 91f9      	LD   R31,Y+
000151 91e9      	LD   R30,Y+
000152 91b9      	LD   R27,Y+
000153 91a9      	LD   R26,Y+
000154 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0038 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0039 int i = 0;
                 ; 0000 003A unsigned char Line_Shift = 0;
                 ; 0000 003B DDRB = 0xFF;
                 ;	i -> R16,R17
                 ;	Line_Shift -> R19
                +
000155 e000     +LDI R16 , LOW ( 0 )
000156 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000157 e030      	LDI  R19,0
000158 efef      	LDI  R30,LOW(255)
000159 bbe7      	OUT  0x17,R30
                 ; 0000 003C 
                 ; 0000 003D LCD_Init();                     // LCD 초기화
00015a df82      	RCALL _LCD_Init
                 ; 0000 003E Init_USART1_IntCon(0, RX_Int);    // 9600bps, RX INT
00015b e0e0      	LDI  R30,LOW(0)
00015c 93ea      	ST   -Y,R30
00015d e0a0      	LDI  R26,LOW(0)
00015e df8c      	RCALL _Init_USART1_IntCon
                 ; 0000 003F SREG |= 0x80;                   // glabal int. 허가
00015f 9478      	BSET 7
                 ; 0000 0040 
                 ; 0000 0041 LCD_Pos(0,0);               // 1라인에 USART Intro Message 출력
000160 d09a      	RCALL SUBOPT_0x6
                 ; 0000 0042 LCD_Str(Intro_msg);
000161 e1a5      	LDI  R26,LOW(_Intro_msg)
000162 e0b5      	LDI  R27,HIGH(_Intro_msg)
000163 df65      	RCALL _LCD_Str
                 ; 0000 0043 
                 ; 0000 0044 while(1){
                 _0x35:
                 ; 0000 0045 switch(Status)
000164 01f3      	MOVW R30,R6
                 ; 0000 0046 {
                 ; 0000 0047 case STATUS10_ERROR:    // 에러상태(글자수 초과) 인 경우 화면에 에러 메시지 출력후 현재 수진 문자열 초기화
000165 30ea      	CPI  R30,LOW(0xA)
000166 e0a0      	LDI  R26,HIGH(0xA)
000167 07fa      	CPC  R31,R26
000168 f4c1      	BRNE _0x3B
                 ; 0000 0048 LCD_Pos(0, 0);
000169 d091      	RCALL SUBOPT_0x6
                 ; 0000 0049 LCD_Str(Error_msg);
00016a e2a6      	LDI  R26,LOW(_Error_msg)
00016b e0b5      	LDI  R27,HIGH(_Error_msg)
00016c df5c      	RCALL _LCD_Str
                 ; 0000 004A for(i=0;i<=MAXLEN;i++)
                +
00016d e000     +LDI R16 , LOW ( 0 )
00016e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x3D:
                +
00016f 3102     +CPI R16 , LOW ( 18 )
000170 e0e0     +LDI R30 , HIGH ( 18 )
000171 071e     +CPC R17 , R30
                 	__CPWRN 16,17,18
000172 f434      	BRGE _0x3E
                 ; 0000 004B Current_str[i] = NULL;
000173 d08b      	RCALL SUBOPT_0x7
000174 e0e0      	LDI  R30,LOW(0)
000175 93ec      	ST   X,R30
                +
000176 5f0f     +SUBI R16 , LOW ( - 1 )
000177 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000178 cff6      	RJMP _0x3D
                 _0x3E:
                 ; 0000 004D Status = 0;
000179 2466      	CLR  R6
00017a 2477      	CLR  R7
                 ; 0000 004E Line_Shift = 0;        // 이전 라인을 시프트하여 표시하지 않음??
00017b e030      	LDI  R19,LOW(0)
                 ; 0000 004F buffer_count = 0;
00017c 2455      	CLR  R5
                 ; 0000 0050 Current_str[buffer_count] = NULL;
00017d d078      	RCALL SUBOPT_0x5
00017e e0a0      	LDI  R26,LOW(0)
00017f 83a0      	STD  Z+0,R26
                 ; 0000 0051 break;
000180 c050      	RJMP _0x3A
                 ; 0000 0052 
                 ; 0000 0053 case STATUS0_WAIT_KEY_INPUT: // 입력 대기상태로 아무 동작을 수행하지 않음
                 _0x3B:
000181 9730      	SBIW R30,0
000182 f409      	BRNE _0x3F
                 ; 0000 0054 break;
000183 c04d      	RJMP _0x3A
                 ; 0000 0055 
                 ; 0000 0056 case STATUS1_FIRST_KEY_INPUT: // 처음에 키를 입력받았을때 화면을 초기화 하는 부분
                 _0x3F:
000184 30e1      	CPI  R30,LOW(0x1)
000185 e0a0      	LDI  R26,HIGH(0x1)
000186 07fa      	CPC  R31,R26
000187 f429      	BRNE _0x40
                 ; 0000 0057 LCD_Clear();
000188 df4f      	RCALL _LCD_Clear
                 ; 0000 0058 Status = STATUS2_KEY_INPUT;
000189 e0e2      	LDI  R30,LOW(2)
00018a e0f0      	LDI  R31,HIGH(2)
00018b 013f      	MOVW R6,R30
                 ; 0000 0059 break;
00018c c044      	RJMP _0x3A
                 ; 0000 005A 
                 ; 0000 005B case STATUS3_KEY_INPUT_END:     // 키보드에서 엔터키 정보를 입력받아 기존의 문자열을 저장하는 상태
                 _0x40:
00018d 30e3      	CPI  R30,LOW(0x3)
00018e e0a0      	LDI  R26,HIGH(0x3)
00018f 07fa      	CPC  R31,R26
000190 f509      	BRNE _0x41
                 ; 0000 005C // LCD에 표시하기 위하여 LCD 출력 버퍼에 저장
                 ; 0000 005D buffer_count = 0;
000191 2455      	CLR  R5
                 ; 0000 005E for(i=0; i<MAXLEN; i++)
                +
000192 e000     +LDI R16 , LOW ( 0 )
000193 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x43:
                +
000194 3101     +CPI R16 , LOW ( 17 )
000195 e0e0     +LDI R30 , HIGH ( 17 )
000196 071e     +CPC R17 , R30
                 	__CPWRN 16,17,17
000197 f4ac      	BRGE _0x44
                 ; 0000 005F {
                 ; 0000 0060 if(Current_str[i] <= 0x20)
000198 d066      	RCALL SUBOPT_0x7
000199 91ac      	LD   R26,X
00019a 32a1      	CPI  R26,LOW(0x21)
00019b f418      	BRSH _0x45
                 ; 0000 0061 Current_str[i] = NULL;     // LCD 표시 문자열에서 CR, LF 제거
00019c d062      	RCALL SUBOPT_0x7
00019d e0e0      	LDI  R30,LOW(0)
00019e 93ec      	ST   X,R30
                 ; 0000 0062 Mem_str[i] = Current_str[i];
                 _0x45:
00019f 01f8      	MOVW R30,R16
0001a0 5be8      	SUBI R30,LOW(-_Mem_str)
0001a1 4ffa      	SBCI R31,HIGH(-_Mem_str)
0001a2 010f      	MOVW R0,R30
0001a3 d05b      	RCALL SUBOPT_0x7
0001a4 91ec      	LD   R30,X
0001a5 01d0      	MOVW R26,R0
0001a6 93ec      	ST   X,R30
                 ; 0000 0063 Current_str[i] = NULL;                 // Current_str 초기화
0001a7 d057      	RCALL SUBOPT_0x7
0001a8 e0e0      	LDI  R30,LOW(0)
0001a9 93ec      	ST   X,R30
                 ; 0000 0064 }
                +
0001aa 5f0f     +SUBI R16 , LOW ( - 1 )
0001ab 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001ac cfe7      	RJMP _0x43
                 _0x44:
                 ; 0000 0065 Line_Shift = 1;
0001ad e031      	LDI  R19,LOW(1)
                 ; 0000 0066 Status = STATUS4_LCD_DISPLAY;
0001ae e0e4      	LDI  R30,LOW(4)
0001af e0f0      	LDI  R31,HIGH(4)
0001b0 013f      	MOVW R6,R30
                 ; 0000 0067 break;
0001b1 c01f      	RJMP _0x3A
                 ; 0000 0068 
                 ; 0000 0069 case STATUS2_KEY_INPUT:         // 키보드의 입력이 있을 경우 문자를 포시하며
                 _0x41:
0001b2 30e2      	CPI  R30,LOW(0x2)
0001b3 e0a0      	LDI  R26,HIGH(0x2)
0001b4 07fa      	CPC  R31,R26
0001b5 f021      	BREQ _0x47
                 ; 0000 006A case STATUS4_LCD_DISPLAY:       // 엔터입력을 받은경우(Line_Shift == 1) 기존의 문자열 또한 출력 하도록 함
0001b6 30e4      	CPI  R30,LOW(0x4)
0001b7 e0a0      	LDI  R26,HIGH(0x4)
0001b8 07fa      	CPC  R31,R26
0001b9 f4b9      	BRNE _0x3A
                 _0x47:
                 ; 0000 006B PORTB ^= 1<<2;
0001ba b3e8      	IN   R30,0x18
0001bb e0a4      	LDI  R26,LOW(4)
0001bc 27ea      	EOR  R30,R26
0001bd bbe8      	OUT  0x18,R30
                 ; 0000 006C if(Line_Shift == 0)
0001be 3030      	CPI  R19,0
0001bf f419      	BRNE _0x49
                 ; 0000 006D {
                 ; 0000 006E LCD_Clear();
0001c0 df17      	RCALL _LCD_Clear
                 ; 0000 006F LCD_Pos(0, 0);
0001c1 e0e0      	LDI  R30,LOW(0)
0001c2 c006      	RJMP _0x50
                 ; 0000 0070 LCD_Str(Current_str);
                 ; 0000 0071 }
                 ; 0000 0072 else
                 _0x49:
                 ; 0000 0073 {
                 ; 0000 0074 LCD_Clear();
0001c3 df14      	RCALL _LCD_Clear
                 ; 0000 0075 LCD_Pos(0, 0);
0001c4 d036      	RCALL SUBOPT_0x6
                 ; 0000 0076 LCD_Str(Mem_str);
0001c5 e4a8      	LDI  R26,LOW(_Mem_str)
0001c6 e0b5      	LDI  R27,HIGH(_Mem_str)
0001c7 df01      	RCALL _LCD_Str
                 ; 0000 0077 LCD_Pos(1, 0);
0001c8 e0e1      	LDI  R30,LOW(1)
                 _0x50:
0001c9 93ea      	ST   -Y,R30
0001ca e0a0      	LDI  R26,LOW(0)
0001cb deec      	RCALL _LCD_Pos
                 ; 0000 0078 LCD_Str(Current_str);
0001cc e3a7      	LDI  R26,LOW(_Current_str)
0001cd e0b5      	LDI  R27,HIGH(_Current_str)
0001ce defa      	RCALL _LCD_Str
                 ; 0000 0079 }
                 ; 0000 007A Status = STATUS0_WAIT_KEY_INPUT;
0001cf 2466      	CLR  R6
0001d0 2477      	CLR  R7
                 ; 0000 007B break;
                 ; 0000 007C 
                 ; 0000 007D }
                 _0x3A:
                 ; 0000 007E }
0001d1 cf92      	RJMP _0x35
                 ; 0000 007F }
                 _0x4B:
0001d2 cfff      	RJMP _0x4B
                 ; .FEND
                 
                 	.DSEG
                 _Intro_msg:
000515           	.BYTE 0x11
                 _Error_msg:
000526           	.BYTE 0x11
                 _Current_str:
000537           	.BYTE 0x11
                 _Mem_str:
000548           	.BYTE 0x11
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001d3 931a      	ST   -Y,R17
0001d4 2f1a      	MOV  R17,R26
0001d5 91e0 0065 	LDS  R30,101
0001d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
0001d8 93e0 0065 	STS  101,R30
0001da 91e0 0065 	LDS  R30,101
0001dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x2:
0001dd 60e1      	ORI  R30,1
0001de 93e0 0065 	STS  101,R30
                +
0001e0 ef86     +LDI R24 , LOW ( 246 )
                +__DELAY_USB_LOOP :
0001e1 958a     +DEC R24
0001e2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 246
0001e3 bb1b      	OUT  0x1B,R17
                +
0001e4 ef86     +LDI R24 , LOW ( 246 )
                +__DELAY_USB_LOOP :
0001e5 958a     +DEC R24
0001e6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 246
0001e7 91e0 0065 	LDS  R30,101
0001e9 7fee      	ANDI R30,0xFE
0001ea 93e0 0065 	STS  101,R30
0001ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001ed 931a      	ST   -Y,R17
0001ee 930a      	ST   -Y,R16
0001ef 2f1a      	MOV  R17,R26
0001f0 810a      	LDD  R16,Y+2
0001f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0001f2 e3a8      	LDI  R26,LOW(56)
0001f3 deb9      	RCALL _LCD_Comm
0001f4 e0a4      	LDI  R26,LOW(4)
0001f5 cebe      	RJMP _LCD_delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0001f6 2de5      	MOV  R30,R5
0001f7 e0f0      	LDI  R31,0
0001f8 5ce9      	SUBI R30,LOW(-_Current_str)
0001f9 4ffa      	SBCI R31,HIGH(-_Current_str)
0001fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
0001fb e0e0      	LDI  R30,LOW(0)
0001fc 93ea      	ST   -Y,R30
0001fd e0a0      	LDI  R26,LOW(0)
0001fe ceb9      	RJMP _LCD_Pos
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x7:
0001ff e3a7      	LDI  R26,LOW(_Current_str)
000200 e0b5      	LDI  R27,HIGH(_Current_str)
000201 0fa0      	ADD  R26,R16
000202 1fb1      	ADC  R27,R17
000203 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 _delay_ms:
000204 9610      	adiw r26,0
000205 f039      	breq __delay_ms1
                 __delay_ms0:
000206 95a8      	wdr
                +
000207 e686     +LDI R24 , LOW ( 0xE66 )
000208 e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
000209 9701     +SBIW R24 , 1
00020a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
00020b 9711      	sbiw r26,1
00020c f7c9      	brne __delay_ms0
                 __delay_ms1:
00020d 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :   7 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   7 r6 :   8 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  19 r17:  24 r18:   0 r19:   4 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  14 r25:   3 r26:  66 r27:  15 r28:   2 r29:   1 r30: 124 r31:  24 
x  :  12 y  :  26 z  :   9 
Registers used: 20 out of 35 (57.1%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   2 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  21 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   1 bst   :   0 call  :   0 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :  10 cpi   :  14 cpse  :   0 dec   :   3 des   :   0 
elpm  :   0 eor   :   3 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   4 inc   :   1 jmp   :  36 ld    :  13 ldd   :   3 
ldi   : 101 lds   :   4 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   9 
movw  :  15 mul   :   0 muls  :   1 mulsu :   0 neg   :   0 nop   :   0 
or    :   0 ori   :   3 out   :  13 pop   :   0 push  :   0 rcall :  46 
ret   :  13 reti  :   1 rjmp  :  23 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   6 sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   8 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  23 std   :   1 sts   :  13 sub   :   0 subi  :   6 
swap  :   0 tst   :   1 wdr   :   1 
Instructions used: 41 out of 117 (35.0%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00041c    968     84   1052  131072   0.8%
[.dseg] 0x000100 0x000559      0     89     89    4096   2.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 5 warnings
