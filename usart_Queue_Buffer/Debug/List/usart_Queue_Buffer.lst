
AVRASM ver. 2.1.30  C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_Queue_Buffer\Debug\List\usart_Queue_Buffer.asm Sat Sep 18 21:34:57 2021

C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_Queue_Buffer\Debug\List\usart_Queue_Buffer.asm(1085): warning: Register r4 already defined by the .DEF directive
C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_Queue_Buffer\Debug\List\usart_Queue_Buffer.asm(1086): warning: Register r5 already defined by the .DEF directive
C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_Queue_Buffer\Debug\List\usart_Queue_Buffer.asm(1087): warning: Register r6 already defined by the .DEF directive
C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_Queue_Buffer\Debug\List\usart_Queue_Buffer.asm(1088): warning: Register r7 already defined by the .DEF directive
C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_Queue_Buffer\Debug\List\usart_Queue_Buffer.asm(1089): warning: Register r9 already defined by the .DEF directive
C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_Queue_Buffer\Debug\List\usart_Queue_Buffer.asm(1090): warning: Register r8 already defined by the .DEF directive
C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_Queue_Buffer\Debug\List\usart_Queue_Buffer.asm(1091): warning: Register r11 already defined by the .DEF directive
C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_Queue_Buffer\Debug\List\usart_Queue_Buffer.asm(1092): warning: Register r10 already defined by the .DEF directive
C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_Queue_Buffer\Debug\List\usart_Queue_Buffer.asm(1093): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.43 Evaluation
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 14.745600 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _QueFront=R4
                 	.DEF _QueFront_msb=R5
                 	.DEF _QueRear=R6
                 	.DEF _QueRear_msb=R7
                 	.DEF _first_flag=R9
                 	.DEF _error_flag=R8
                 	.DEF _key=R11
                 	.DEF _ch=R10
                 	.DEF _pos=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0149 	JMP  _usart1_receive
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000046 0000
000047 0000      	.DB  0x0,0x0,0x0,0x0
000048 0000      	.DB  0x0,0x0
                 
                 _0x2D:
C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_Queue_Buffer\Debug\List\usart_Queue_Buffer.asm(1144): warning: .cseg .db misalignment - padding zero byte
000049 0014      	.DB  0x14
                 _0x0:
00004a 2020
00004b 2020
00004c 2020
00004d 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00004e 2020
00004f 2020
000050 2020
000051 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000052 2020
000053 2020
C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_Queue_Buffer\Debug\List\usart_Queue_Buffer.asm(1148): warning: .cseg .db misalignment - padding zero byte
000054 0000      	.DB  0x20,0x20,0x20,0x20,0x0
                 
                 __GLOBAL_INI_TBL:
000055 0006      	.DW  0x06
000056 0004      	.DW  0x04
000057 008c      	.DW  __REG_VARS*2
                 
000058 0015      	.DW  0x15
000059 0500      	.DW  _0xA
00005a 0094      	.DW  _0x0*2
                 
                 _0xFFFFFFFF:
00005b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005c 94f8      	CLI
00005d 27ee      	CLR  R30
00005e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005f e0f1      	LDI  R31,1
000060 bff5      	OUT  MCUCR,R31
000061 bfe5      	OUT  MCUCR,R30
000062 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000064 e08d      	LDI  R24,(14-2)+1
000065 e0a2      	LDI  R26,2
000066 27bb      	CLR  R27
                 __CLEAR_REG:
000067 93ed      	ST   X+,R30
000068 958a      	DEC  R24
000069 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006b e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006c e0a0      	LDI  R26,LOW(__SRAM_START)
00006d e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006e 93ed      	ST   X+,R30
00006f 9701      	SBIW R24,1
000070 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000071 eaea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000072 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000073 9185      	LPM  R24,Z+
000074 9195      	LPM  R25,Z+
000075 9700      	SBIW R24,0
000076 f061      	BREQ __GLOBAL_INI_END
000077 91a5      	LPM  R26,Z+
000078 91b5      	LPM  R27,Z+
000079 9005      	LPM  R0,Z+
00007a 9015      	LPM  R1,Z+
00007b 01bf      	MOVW R22,R30
00007c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007d 9005      	LPM  R0,Z+
00007e 920d      	ST   X+,R0
00007f 9701      	SBIW R24,1
000080 f7e1      	BRNE __GLOBAL_INI_LOOP
000081 01fb      	MOVW R30,R22
000082 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000083 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000084 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000085 bfed      	OUT  SPL,R30
000086 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000087 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000088 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000089 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008a 940c 01a8 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 
                 	.CSEG
                 _LCD_PORT_Init:
                 ; .FSTART _LCD_PORT_Init
00008c efef      	LDI  R30,LOW(255)
00008d bbea      	OUT  0x1A,R30
00008e e1ef      	LDI  R30,LOW(31)
00008f 93e0 0064 	STS  100,R30
000091 9508      	RET
                 ; .FEND
                 _LCD_Data:
                 ; .FSTART _LCD_Data
000092 d125      	RCALL SUBOPT_0x0
                 ;	ch -> R17
000093 60e4      	ORI  R30,4
000094 d128      	RCALL SUBOPT_0x1
000095 7fed      	ANDI R30,0xFD
000096 d126      	RCALL SUBOPT_0x1
000097 d12a      	RCALL SUBOPT_0x2
000098 c08b      	RJMP _0x2000002
                 ; .FEND
                 _LCD_Comm:
                 ; .FSTART _LCD_Comm
000099 d11e      	RCALL SUBOPT_0x0
                 ;	ch -> R17
00009a 7feb      	ANDI R30,0xFB
00009b d121      	RCALL SUBOPT_0x1
00009c 7fed      	ANDI R30,0xFD
00009d d11f      	RCALL SUBOPT_0x1
00009e d123      	RCALL SUBOPT_0x2
00009f c084      	RJMP _0x2000002
                 ; .FEND
                 _LCD_delay:
                 ; .FSTART _LCD_delay
0000a0 931a      	ST   -Y,R17
0000a1 2f1a      	MOV  R17,R26
                 ;	ms -> R17
0000a2 27bb      	CLR  R27
0000a3 d141      	RCALL _delay_ms
0000a4 c07f      	RJMP _0x2000002
                 ; .FEND
                 _LCD_Pos:
                 ; .FSTART _LCD_Pos
0000a5 d12c      	RCALL SUBOPT_0x3
                 ;	col -> R16
                 ;	row -> R17
0000a6 e4a0      	LDI  R26,LOW(64)
0000a7 020a      	MULS R16,R26
0000a8 01f0      	MOVW R30,R0
0000a9 0fe1      	ADD  R30,R17
0000aa 68e0      	ORI  R30,0x80
0000ab 2fae      	MOV  R26,R30
0000ac dfec      	RCALL _LCD_Comm
0000ad c04c      	RJMP _0x2000003
                 ; .FEND
                 _LCD_Char:
                 ; .FSTART _LCD_Char
0000ae 931a      	ST   -Y,R17
0000af 2f1a      	MOV  R17,R26
                 ;	c -> R17
0000b0 dfe1      	RCALL _LCD_Data
0000b1 e0a1      	LDI  R26,LOW(1)
0000b2 e0b0      	LDI  R27,0
0000b3 d131      	RCALL _delay_ms
0000b4 c06f      	RJMP _0x2000002
                 ; .FEND
                 ;	*str -> R16,R17
                 ;	*str -> R18,R19
                 ;	loop_count -> R17
                 
                 	.DSEG
                 _0xA:
000500           	.BYTE 0x15
                 
                 	.CSEG
                 _LCD_Clear:
                 ; .FSTART _LCD_Clear
0000b5 e0a1      	LDI  R26,LOW(1)
0000b6 dfe2      	RCALL _LCD_Comm
0000b7 e0a2      	LDI  R26,LOW(2)
0000b8 dfe7      	RCALL _LCD_delay
0000b9 9508      	RET
                 ; .FEND
                 _LCD_Init:
                 ; .FSTART _LCD_Init
0000ba dfd1      	RCALL _LCD_PORT_Init
0000bb d11b      	RCALL SUBOPT_0x4
0000bc d11a      	RCALL SUBOPT_0x4
0000bd d119      	RCALL SUBOPT_0x4
0000be e0ae      	LDI  R26,LOW(14)
0000bf dfd9      	RCALL _LCD_Comm
0000c0 e0a4      	LDI  R26,LOW(4)
0000c1 dfde      	RCALL _LCD_delay
0000c2 e0a6      	LDI  R26,LOW(6)
0000c3 dfd5      	RCALL _LCD_Comm
0000c4 e0a4      	LDI  R26,LOW(4)
0000c5 dfda      	RCALL _LCD_delay
0000c6 dfee      	RCALL _LCD_Clear
0000c7 9508      	RET
                 ; .FEND
                 ;	p -> R17
                 ;	p -> R17
                 ;	baud -> R17
                 _Init_USART1_IntCon:
                 ; .FSTART _Init_USART1_IntCon
0000c8 d109      	RCALL SUBOPT_0x3
                 ;	baud -> R16
                 ;	Int_type -> R17
0000c9 e0e0      	LDI  R30,LOW(0)
0000ca 93e0 009b 	STS  155,R30
0000cc e9e8      	LDI  R30,LOW(152)
0000cd 93e0 009a 	STS  154,R30
0000cf 2fe0      	MOV  R30,R16
0000d0 e0f0      	LDI  R31,0
0000d1 9730      	SBIW R30,0
0000d2 f439      	BRNE _0x1B
0000d3 e0e0      	LDI  R30,LOW(0)
0000d4 93e0 0098 	STS  152,R30
0000d6 e5ef      	LDI  R30,LOW(95)
0000d7 93e0 0099 	STS  153,R30
0000d9 c00a      	RJMP _0x1A
                 _0x1B:
0000da 30e1      	CPI  R30,LOW(0x1)
0000db e0a0      	LDI  R26,HIGH(0x1)
0000dc 07fa      	CPC  R31,R26
0000dd f431      	BRNE _0x1D
0000de e0e0      	LDI  R30,LOW(0)
0000df 93e0 0098 	STS  152,R30
0000e1 e0e7      	LDI  R30,LOW(7)
0000e2 93e0 0099 	STS  153,R30
                 _0x1D:
                 _0x1A:
0000e4 2fe1      	MOV  R30,R17
0000e5 e0f0      	LDI  R31,0
0000e6 9730      	SBIW R30,0
0000e7 f411      	BRNE _0x21
0000e8 e9e8      	LDI  R30,LOW(152)
0000e9 c00b      	RJMP _0x45
                 _0x21:
0000ea 30e1      	CPI  R30,LOW(0x1)
0000eb e0a0      	LDI  R26,HIGH(0x1)
0000ec 07fa      	CPC  R31,R26
0000ed f411      	BRNE _0x22
0000ee e3e8      	LDI  R30,LOW(56)
0000ef c005      	RJMP _0x45
                 _0x22:
0000f0 30e2      	CPI  R30,LOW(0x2)
0000f1 e0a0      	LDI  R26,HIGH(0x2)
0000f2 07fa      	CPC  R31,R26
0000f3 f419      	BRNE _0x20
0000f4 ebe8      	LDI  R30,LOW(184)
                 _0x45:
0000f5 93e0 009a 	STS  154,R30
                 _0x20:
0000f7 e0e6      	LDI  R30,LOW(6)
0000f8 93e0 009d 	STS  157,R30
                 _0x2000003:
0000fa 8119      	LDD  R17,Y+1
0000fb 8108      	LDD  R16,Y+0
0000fc 9623      	ADIW R28,3
0000fd 9508      	RET
                 ; .FEND
                 ;	data -> R17
                 ;	*str -> R16,R17
                 
                 	.DSEG
                 ;int enQue(char data)
                 ; 0000 001C {
                 
                 	.CSEG
                 _enQue:
                 ; .FSTART _enQue
                 ; 0000 001D if((QueRear-QueFront)>=QueBuffSize)
0000fe 931a      	ST   -Y,R17
0000ff 2f1a      	MOV  R17,R26
                 ;	data -> R17
000100 01d3      	MOVW R26,R6
000101 19a4      	SUB  R26,R4
000102 09b5      	SBC  R27,R5
000103 9754      	SBIW R26,20
000104 f01c      	BRLT _0x2E
                 ; 0000 001E return -1;
000105 efef      	LDI  R30,LOW(65535)
000106 efff      	LDI  R31,HIGH(65535)
000107 c01c      	RJMP _0x2000002
                 ; 0000 001F 
                 ; 0000 0020 if((QueRear - QueFront) <= -QueBuffSize)
                 _0x2E:
000108 01d3      	MOVW R26,R6
000109 19a4      	SUB  R26,R4
00010a 09b5      	SBC  R27,R5
00010b eeec      	LDI  R30,LOW(65516)
00010c efff      	LDI  R31,HIGH(65516)
00010d 17ea      	CP   R30,R26
00010e 07fb      	CPC  R31,R27
00010f f01c      	BRLT _0x2F
                 ; 0000 0021 return -1;
000110 efef      	LDI  R30,LOW(65535)
000111 efff      	LDI  R31,HIGH(65535)
000112 c011      	RJMP _0x2000002
                 ; 0000 0022 
                 ; 0000 0023 QueData[QueRear] = data;
                 _0x2F:
000113 01f3      	MOVW R30,R6
000114 5eeb      	SUBI R30,LOW(-_QueData)
000115 4ffa      	SBCI R31,HIGH(-_QueData)
000116 8310      	ST   Z,R17
                 ; 0000 0024 QueRear++;
000117 01f3      	MOVW R30,R6
000118 9631      	ADIW R30,1
000119 013f      	MOVW R6,R30
                 ; 0000 0025 
                 ; 0000 0026 if(QueRear >= QueBuffSize)
00011a e1e4      	LDI  R30,LOW(20)
00011b e0f0      	LDI  R31,HIGH(20)
00011c 166e      	CP   R6,R30
00011d 067f      	CPC  R7,R31
00011e f014      	BRLT _0x30
                 ; 0000 0027 QueRear = 0;
00011f 2466      	CLR  R6
000120 2477      	CLR  R7
                 ; 0000 0028 
                 ; 0000 0029 return(QueRear-QueFront);
                 _0x30:
000121 01f3      	MOVW R30,R6
000122 19e4      	SUB  R30,R4
000123 09f5      	SBC  R31,R5
                 _0x2000002:
000124 9119      	LD   R17,Y+
000125 9508      	RET
                 ; 0000 002A }
                 ; .FEND
                 ;int deQue(char *pData)
                 ; 0000 002D {
                 _deQue:
                 ; .FSTART _deQue
                 ; 0000 002E if((QueRear - QueFront) == 0) {
000126 931a      	ST   -Y,R17
000127 930a      	ST   -Y,R16
000128 018d      	MOVW R16,R26
                 ;	*pData -> R16,R17
000129 01f3      	MOVW R30,R6
00012a 19e4      	SUB  R30,R4
00012b 09f5      	SBC  R31,R5
00012c f429      	BRNE _0x31
                 ; 0000 002F *pData = 0;
00012d e0e0      	LDI  R30,LOW(0)
00012e 93ec      	ST   X,R30
                 ; 0000 0030 return -1;
00012f efef      	LDI  R30,LOW(65535)
000130 efff      	LDI  R31,HIGH(65535)
000131 c014      	RJMP _0x2000001
                 ; 0000 0031 }
                 ; 0000 0032 
                 ; 0000 0033 *pData = QueData[QueFront];
                 _0x31:
000132 e1a5      	LDI  R26,LOW(_QueData)
000133 e0b5      	LDI  R27,HIGH(_QueData)
000134 0da4      	ADD  R26,R4
000135 1db5      	ADC  R27,R5
000136 91ec      	LD   R30,X
000137 01d8      	MOVW R26,R16
000138 93ec      	ST   X,R30
                 ; 0000 0034 QueFront++;
000139 01f2      	MOVW R30,R4
00013a 9631      	ADIW R30,1
00013b 012f      	MOVW R4,R30
                 ; 0000 0035 
                 ; 0000 0036 if(QueFront >= QueBuffSize)
00013c e1e4      	LDI  R30,LOW(20)
00013d e0f0      	LDI  R31,HIGH(20)
00013e 164e      	CP   R4,R30
00013f 065f      	CPC  R5,R31
000140 f014      	BRLT _0x32
                 ; 0000 0037 QueFront = 0;
000141 2444      	CLR  R4
000142 2455      	CLR  R5
                 ; 0000 0038 
                 ; 0000 0039 return (QueRear-QueFront);
                 _0x32:
000143 01f3      	MOVW R30,R6
000144 19e4      	SUB  R30,R4
000145 09f5      	SBC  R31,R5
                 _0x2000001:
000146 9109      	LD   R16,Y+
000147 9119      	LD   R17,Y+
000148 9508      	RET
                 ; 0000 003A }
                 ; .FEND
                 ;interrupt [31] void usart1_receive(void)
                 ; 0000 003D {
                 _usart1_receive:
                 ; .FSTART _usart1_receive
000149 920a      	ST   -Y,R0
00014a 921a      	ST   -Y,R1
00014b 92fa      	ST   -Y,R15
00014c 936a      	ST   -Y,R22
00014d 937a      	ST   -Y,R23
00014e 938a      	ST   -Y,R24
00014f 939a      	ST   -Y,R25
000150 93aa      	ST   -Y,R26
000151 93ba      	ST   -Y,R27
000152 93ea      	ST   -Y,R30
000153 93fa      	ST   -Y,R31
000154 b7ef      	IN   R30,SREG
000155 93ea      	ST   -Y,R30
                 ; 0000 003E int i;
                 ; 0000 003F unsigned char recByte = 0;
                 ; 0000 0040 
                 ; 0000 0041 recByte = UDR1;
000156 d084      	RCALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	recByte -> R19
000157 e030      	LDI  R19,0
000158 9130 009c 	LDS  R19,156
                 ; 0000 0042 enQue(recByte);
00015a 2fa3      	MOV  R26,R19
00015b dfa2      	RCALL _enQue
                 ; 0000 0043 
                 ; 0000 0044 
                 ; 0000 0045 if(QueRear > QueFront)
                +
00015c 1446     +CP R4 , R6
00015d 0457     +CPC R5 , R7
                 	__CPWRR 4,5,6,7
00015e f4cc      	BRGE _0x33
                 ; 0000 0046 {
                 ; 0000 0047 
                 ; 0000 0048 if( (QueRear-QueFront) > 16){
00015f 01d3      	MOVW R26,R6
000160 19a4      	SUB  R26,R4
000161 09b5      	SBC  R27,R5
000162 9751      	SBIW R26,17
000163 f01c      	BRLT _0x34
                 ; 0000 0049 deQue(QueData);
000164 e1a5      	LDI  R26,LOW(_QueData)
000165 e0b5      	LDI  R27,HIGH(_QueData)
000166 dfbf      	RCALL _deQue
                 ; 0000 004A }
                 ; 0000 004B 
                 ; 0000 004C for(i=0; i < 16 ; i++){
                 _0x34:
                +
000167 e000     +LDI R16 , LOW ( 0 )
000168 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x36:
                +
000169 3100     +CPI R16 , LOW ( 16 )
00016a e0e0     +LDI R30 , HIGH ( 16 )
00016b 071e     +CPC R17 , R30
                 	__CPWRN 16,17,16
00016c f454      	BRGE _0x37
                 ; 0000 004D 
                 ; 0000 004E LCD_Char(QueData[QueFront+i]);
00016d 01f8      	MOVW R30,R16
00016e 0de4      	ADD  R30,R4
00016f 1df5      	ADC  R31,R5
000170 5eeb      	SUBI R30,LOW(-_QueData)
000171 4ffa      	SBCI R31,HIGH(-_QueData)
000172 81a0      	LD   R26,Z
000173 df3a      	RCALL _LCD_Char
                 ; 0000 004F 
                 ; 0000 0050 
                 ; 0000 0051 }
                +
000174 5f0f     +SUBI R16 , LOW ( - 1 )
000175 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000176 cff2      	RJMP _0x36
                 _0x37:
                 ; 0000 0052 }
                 ; 0000 0053 else if( QueFront > QueRear)
000177 c020      	RJMP _0x38
                 _0x33:
                +
000178 1464     +CP R6 , R4
000179 0475     +CPC R7 , R5
                 	__CPWRR 6,7,4,5
00017a f4ec      	BRGE _0x39
                 ; 0000 0054 {
                 ; 0000 0055 deQue(QueData);
00017b e1a5      	LDI  R26,LOW(_QueData)
00017c e0b5      	LDI  R27,HIGH(_QueData)
00017d dfa8      	RCALL _deQue
                 ; 0000 0056 
                 ; 0000 0057 for(i=0; i < 16 ; i++){
                +
00017e e000     +LDI R16 , LOW ( 0 )
00017f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x3B:
                +
000180 3100     +CPI R16 , LOW ( 16 )
000181 e0e0     +LDI R30 , HIGH ( 16 )
000182 071e     +CPC R17 , R30
                 	__CPWRN 16,17,16
000183 f4a4      	BRGE _0x3C
                 ; 0000 0058 
                 ; 0000 0059 if (QueFront+i < QueBuffSize) LCD_Char(QueData[QueFront+i]);
000184 01d8      	MOVW R26,R16
000185 0da4      	ADD  R26,R4
000186 1db5      	ADC  R27,R5
000187 9754      	SBIW R26,20
000188 f424      	BRGE _0x3D
000189 01f8      	MOVW R30,R16
00018a 0de4      	ADD  R30,R4
00018b 1df5      	ADC  R31,R5
00018c c004      	RJMP _0x46
                 ; 0000 005A else LCD_Char(QueData[QueFront+i-QueBuffSize]);
                 _0x3D:
00018d 01f8      	MOVW R30,R16
00018e 0de4      	ADD  R30,R4
00018f 1df5      	ADC  R31,R5
000190 9774      	SBIW R30,20
                 _0x46:
000191 5eeb      	SUBI R30,LOW(-_QueData)
000192 4ffa      	SBCI R31,HIGH(-_QueData)
000193 81a0      	LD   R26,Z
000194 df19      	RCALL _LCD_Char
                 ; 0000 005B 
                 ; 0000 005C 
                 ; 0000 005D }
                +
000195 5f0f     +SUBI R16 , LOW ( - 1 )
000196 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000197 cfe8      	RJMP _0x3B
                 _0x3C:
                 ; 0000 005E 
                 ; 0000 005F 
                 ; 0000 0060 }
                 ; 0000 0061 }
                 _0x39:
                 _0x38:
000198 d047      	RCALL __LOADLOCR4
000199 9624      	ADIW R28,4
00019a 91e9      	LD   R30,Y+
00019b bfef      	OUT  SREG,R30
00019c 91f9      	LD   R31,Y+
00019d 91e9      	LD   R30,Y+
00019e 91b9      	LD   R27,Y+
00019f 91a9      	LD   R26,Y+
0001a0 9199      	LD   R25,Y+
0001a1 9189      	LD   R24,Y+
0001a2 9179      	LD   R23,Y+
0001a3 9169      	LD   R22,Y+
0001a4 90f9      	LD   R15,Y+
0001a5 9019      	LD   R1,Y+
0001a6 9009      	LD   R0,Y+
0001a7 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0067 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0068 unsigned char i;
                 ; 0000 0069 LCD_Init();
                 ;	i -> R17
0001a8 df11      	RCALL _LCD_Init
                 ; 0000 006A Init_USART1_IntCon(0,RX_Int);
0001a9 e0e0      	LDI  R30,LOW(0)
0001aa 93ea      	ST   -Y,R30
0001ab e0a0      	LDI  R26,LOW(0)
0001ac df1b      	RCALL _Init_USART1_IntCon
                 ; 0000 006B SREG |= 0x80;
0001ad 9478      	BSET 7
                 ; 0000 006C pos = 1;
0001ae e0e1      	LDI  R30,LOW(1)
0001af 2ede      	MOV  R13,R30
                 ; 0000 006D ch = 0;
0001b0 24aa      	CLR  R10
                 ; 0000 006E key = 0;
0001b1 24bb      	CLR  R11
                 ; 0000 006F 
                 ; 0000 0070 
                 ; 0000 0071 
                 ; 0000 0072 while (1)
                 _0x3F:
                 ; 0000 0073 {
                 ; 0000 0074 LCD_Pos(0,0);
0001b2 e0e0      	LDI  R30,LOW(0)
0001b3 93ea      	ST   -Y,R30
0001b4 e0a0      	LDI  R26,LOW(0)
0001b5 deef      	RCALL _LCD_Pos
                 ; 0000 0075 
                 ; 0000 0076 }
0001b6 cffb      	RJMP _0x3F
                 ; 0000 0077 }
                 _0x42:
0001b7 cfff      	RJMP _0x42
                 ; .FEND
                 
                 	.DSEG
                 _QueData:
000515           	.BYTE 0x14
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001b8 931a      	ST   -Y,R17
0001b9 2f1a      	MOV  R17,R26
0001ba 91e0 0065 	LDS  R30,101
0001bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
0001bd 93e0 0065 	STS  101,R30
0001bf 91e0 0065 	LDS  R30,101
0001c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x2:
0001c2 60e1      	ORI  R30,1
0001c3 93e0 0065 	STS  101,R30
                +
0001c5 ef86     +LDI R24 , LOW ( 246 )
                +__DELAY_USB_LOOP :
0001c6 958a     +DEC R24
0001c7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 246
0001c8 bb1b      	OUT  0x1B,R17
                +
0001c9 ef86     +LDI R24 , LOW ( 246 )
                +__DELAY_USB_LOOP :
0001ca 958a     +DEC R24
0001cb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 246
0001cc 91e0 0065 	LDS  R30,101
0001ce 7fee      	ANDI R30,0xFE
0001cf 93e0 0065 	STS  101,R30
0001d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001d2 931a      	ST   -Y,R17
0001d3 930a      	ST   -Y,R16
0001d4 2f1a      	MOV  R17,R26
0001d5 810a      	LDD  R16,Y+2
0001d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0001d7 e3a8      	LDI  R26,LOW(56)
0001d8 dec0      	RCALL _LCD_Comm
0001d9 e0a4      	LDI  R26,LOW(4)
0001da cec5      	RJMP _LCD_delay
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
0001db 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001dc 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001dd 931a      	ST   -Y,R17
0001de 930a      	ST   -Y,R16
0001df 9508      	RET
                 
                 __LOADLOCR4:
0001e0 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001e1 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001e2 8119      	LDD  R17,Y+1
0001e3 8108      	LD   R16,Y
0001e4 9508      	RET
                 
                 _delay_ms:
0001e5 9610      	adiw r26,0
0001e6 f039      	breq __delay_ms1
                 __delay_ms0:
0001e7 95a8      	wdr
                +
0001e8 e686     +LDI R24 , LOW ( 0xE66 )
0001e9 e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
0001ea 9701     +SBIW R24 , 1
0001eb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
0001ec 9711      	sbiw r26,1
0001ed f7c9      	brne __delay_ms0
                 __delay_ms1:
0001ee 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :   7 r1 :   3 r2 :   0 r3 :   0 r4 :  17 r5 :  15 r6 :  13 r7 :   4 
r8 :   0 r9 :   0 r10:   1 r11:   1 r12:   0 r13:   1 r14:   0 r15:   2 
r16:  21 r17:  26 r18:   2 r19:   5 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  16 r25:   5 r26:  53 r27:  16 r28:   3 r29:   1 r30: 111 r31:  28 
x  :   6 y  :  48 z  :  10 
Registers used: 27 out of 35 (77.1%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   6 
adiw  :   5 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   5 brmi  :   0 brne  :  13 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   1 bst   :   0 call  :   0 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :  10 cpi   :   5 cpse  :   0 dec   :   3 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   1 inc   :   0 jmp   :  36 ld    :  19 ldd   :   6 
ldi   :  76 lds   :   4 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  10 
movw  :  21 mul   :   0 muls  :   1 mulsu :   0 neg   :   0 nop   :   0 
or    :   0 ori   :   3 out   :   9 pop   :   0 push  :   0 rcall :  36 
ret   :  13 reti  :   1 rjmp  :  19 rol   :   0 ror   :   0 sbc   :   6 
sbci  :   5 sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :  11 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  32 std   :   0 sts   :  13 sub   :   6 subi  :   5 
swap  :   0 tst   :   0 wdr   :   1 
Instructions used: 39 out of 117 (33.3%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003de    946     44    990  131072   0.8%
[.dseg] 0x000100 0x000529      0     41     41    4096   1.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 11 warnings
