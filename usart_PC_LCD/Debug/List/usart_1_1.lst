
AVRASM ver. 2.1.30  C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_1_1\Debug\List\usart_1_1.asm Sat Sep 18 19:38:06 2021

C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_1_1\Debug\List\usart_1_1.asm(1085): warning: Register r5 already defined by the .DEF directive
C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_1_1\Debug\List\usart_1_1.asm(1086): warning: Register r4 already defined by the .DEF directive
C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_1_1\Debug\List\usart_1_1.asm(1087): warning: Register r7 already defined by the .DEF directive
C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_1_1\Debug\List\usart_1_1.asm(1088): warning: Register r6 already defined by the .DEF directive
C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_1_1\Debug\List\usart_1_1.asm(1089): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.43 
                 ;(C) Copyright 1998-2021 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 14.745600 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _first_flag=R5
                 	.DEF _error_flag=R4
                 	.DEF _key=R7
                 	.DEF _ch=R6
                 	.DEF _pos=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 007b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 012c 	JMP  _usart1_receive
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000046 0000      	.DB  0x0,0x0
                 
                 _0x2D:
000047 7250
000048 7365
000049 2073
00004a 6863      	.DB  0x50,0x72,0x65,0x73,0x73,0x20,0x63,0x68
00004b 7261
00004c 4526
00004d 746e
00004e 7265      	.DB  0x61,0x72,0x26,0x45,0x6E,0x74,0x65,0x72
                 _0x2E:
00004f 614d
000050 2078
000051 656c
000052 676e      	.DB  0x4D,0x61,0x78,0x20,0x6C,0x65,0x6E,0x67
000053 6874
000054 6520
000055 7272
000056 726f      	.DB  0x74,0x68,0x20,0x65,0x72,0x72,0x6F,0x72
                 _0x0:
000057 2020
000058 2020
000059 2020
00005a 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00005b 2020
00005c 2020
00005d 2020
00005e 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00005f 2020
000060 2020
C:\Users\user\Desktop\대학교\3학년\2학기\마이크로프로세서2\usart_1_1\Debug\List\usart_1_1.asm(1147): warning: .cseg .db misalignment - padding zero byte
000061 0000      	.DB  0x20,0x20,0x20,0x20,0x0
                 
                 __GLOBAL_INI_TBL:
000062 0002      	.DW  0x02
000063 0004      	.DW  0x04
000064 008c      	.DW  __REG_VARS*2
                 
000065 0015      	.DW  0x15
000066 0500      	.DW  _0xA
000067 00ae      	.DW  _0x0*2
                 
000068 0010      	.DW  0x10
000069 057b      	.DW  _start_str
00006a 008e      	.DW  _0x2D*2
                 
00006b 0010      	.DW  0x10
00006c 058c      	.DW  _error_message
00006d 009e      	.DW  _0x2E*2
                 
00006e 0011      	.DW  0x11
00006f 0515      	.DW  _0x3E
000070 00b2      	.DW  _0x0*2+4
                 
000071 0011      	.DW  0x11
000072 0526      	.DW  _0x3E+17
000073 00b2      	.DW  _0x0*2+4
                 
000074 0011      	.DW  0x11
000075 0537      	.DW  _0x3E+34
000076 00b2      	.DW  _0x0*2+4
                 
000077 0011      	.DW  0x11
000078 0548      	.DW  _0x3E+51
000079 00b2      	.DW  _0x0*2+4
                 
                 _0xFFFFFFFF:
00007a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00007b 94f8      	CLI
00007c 27ee      	CLR  R30
00007d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00007e e0f1      	LDI  R31,1
00007f bff5      	OUT  MCUCR,R31
000080 bfe5      	OUT  MCUCR,R30
000081 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000083 e08d      	LDI  R24,(14-2)+1
000084 e0a2      	LDI  R26,2
000085 27bb      	CLR  R27
                 __CLEAR_REG:
000086 93ed      	ST   X+,R30
000087 958a      	DEC  R24
000088 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000089 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00008a e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00008b e0a0      	LDI  R26,LOW(__SRAM_START)
00008c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00008d 93ed      	ST   X+,R30
00008e 9701      	SBIW R24,1
00008f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000090 ece4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000091 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000092 9185      	LPM  R24,Z+
000093 9195      	LPM  R25,Z+
000094 9700      	SBIW R24,0
000095 f061      	BREQ __GLOBAL_INI_END
000096 91a5      	LPM  R26,Z+
000097 91b5      	LPM  R27,Z+
000098 9005      	LPM  R0,Z+
000099 9015      	LPM  R1,Z+
00009a 01bf      	MOVW R22,R30
00009b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00009c 9005      	LPM  R0,Z+
00009d 920d      	ST   X+,R0
00009e 9701      	SBIW R24,1
00009f f7e1      	BRNE __GLOBAL_INI_LOOP
0000a0 01fb      	MOVW R30,R22
0000a1 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000a2 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a3 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a4 bfed      	OUT  SPL,R30
0000a5 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a6 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a7 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a8 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a9 940c 018f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 
                 	.CSEG
                 _LCD_PORT_Init:
                 ; .FSTART _LCD_PORT_Init
0000ab efef      	LDI  R30,LOW(255)
0000ac bbea      	OUT  0x1A,R30
0000ad e1ef      	LDI  R30,LOW(31)
0000ae 93e0 0064 	STS  100,R30
0000b0 9508      	RET
                 ; .FEND
                 _LCD_Data:
                 ; .FSTART _LCD_Data
0000b1 d128      	RCALL SUBOPT_0x0
                 ;	ch -> R17
0000b2 60e4      	ORI  R30,4
0000b3 d12b      	RCALL SUBOPT_0x1
0000b4 7fed      	ANDI R30,0xFD
0000b5 d129      	RCALL SUBOPT_0x1
0000b6 d12d      	RCALL SUBOPT_0x2
0000b7 c01a      	RJMP _0x2000003
                 ; .FEND
                 _LCD_Comm:
                 ; .FSTART _LCD_Comm
0000b8 d121      	RCALL SUBOPT_0x0
                 ;	ch -> R17
0000b9 7feb      	ANDI R30,0xFB
0000ba d124      	RCALL SUBOPT_0x1
0000bb 7fed      	ANDI R30,0xFD
0000bc d122      	RCALL SUBOPT_0x1
0000bd d126      	RCALL SUBOPT_0x2
0000be c013      	RJMP _0x2000003
                 ; .FEND
                 _LCD_delay:
                 ; .FSTART _LCD_delay
0000bf 931a      	ST   -Y,R17
0000c0 2f1a      	MOV  R17,R26
                 ;	ms -> R17
0000c1 27bb      	CLR  R27
0000c2 c00e      	RJMP _0x2000002
                 ; .FEND
                 _LCD_Pos:
                 ; .FSTART _LCD_Pos
0000c3 d130      	RCALL SUBOPT_0x3
                 ;	col -> R16
                 ;	row -> R17
0000c4 e4a0      	LDI  R26,LOW(64)
0000c5 020a      	MULS R16,R26
0000c6 01f0      	MOVW R30,R0
0000c7 0fe1      	ADD  R30,R17
0000c8 68e0      	ORI  R30,0x80
0000c9 2fae      	MOV  R26,R30
0000ca dfed      	RCALL _LCD_Comm
0000cb c05c      	RJMP _0x2000001
                 ; .FEND
                 _LCD_Char:
                 ; .FSTART _LCD_Char
0000cc 931a      	ST   -Y,R17
0000cd 2f1a      	MOV  R17,R26
                 ;	c -> R17
0000ce dfe2      	RCALL _LCD_Data
0000cf e0a1      	LDI  R26,LOW(1)
0000d0 e0b0      	LDI  R27,0
                 _0x2000002:
0000d1 d139      	RCALL _delay_ms
                 _0x2000003:
0000d2 9119      	LD   R17,Y+
0000d3 9508      	RET
                 ; .FEND
                 _LCD_Str:
                 ; .FSTART _LCD_Str
0000d4 931a      	ST   -Y,R17
0000d5 930a      	ST   -Y,R16
0000d6 018d      	MOVW R16,R26
                 ;	*str -> R16,R17
                 _0x3:
0000d7 01d8      	MOVW R26,R16
0000d8 91ec      	LD   R30,X
0000d9 30e0      	CPI  R30,0
0000da f029      	BREQ _0x5
0000db 91ac      	LD   R26,X
0000dc dfef      	RCALL _LCD_Char
                +
0000dd 5f0f     +SUBI R16 , LOW ( - 1 )
0000de 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000df cff7      	RJMP _0x3
                 _0x5:
0000e0 9109      	LD   R16,Y+
0000e1 9119      	LD   R17,Y+
0000e2 9508      	RET
                 ; .FEND
                 ;	*str -> R18,R19
                 ;	loop_count -> R17
                 
                 	.DSEG
                 _0xA:
000500           	.BYTE 0x15
                 
                 	.CSEG
                 _LCD_Clear:
                 ; .FSTART _LCD_Clear
0000e3 e0a1      	LDI  R26,LOW(1)
0000e4 dfd3      	RCALL _LCD_Comm
0000e5 e0a2      	LDI  R26,LOW(2)
0000e6 dfd8      	RCALL _LCD_delay
0000e7 9508      	RET
                 ; .FEND
                 _LCD_Init:
                 ; .FSTART _LCD_Init
0000e8 dfc2      	RCALL _LCD_PORT_Init
0000e9 d10f      	RCALL SUBOPT_0x4
0000ea d10e      	RCALL SUBOPT_0x4
0000eb d10d      	RCALL SUBOPT_0x4
0000ec e0ae      	LDI  R26,LOW(14)
0000ed dfca      	RCALL _LCD_Comm
0000ee e0a4      	LDI  R26,LOW(4)
0000ef dfcf      	RCALL _LCD_delay
0000f0 e0a6      	LDI  R26,LOW(6)
0000f1 dfc6      	RCALL _LCD_Comm
0000f2 e0a4      	LDI  R26,LOW(4)
0000f3 dfcb      	RCALL _LCD_delay
0000f4 dfee      	RCALL _LCD_Clear
0000f5 9508      	RET
                 ; .FEND
                 ;	p -> R17
                 ;	p -> R17
                 ;	baud -> R17
                 _Init_USART1_IntCon:
                 ; .FSTART _Init_USART1_IntCon
0000f6 d0fd      	RCALL SUBOPT_0x3
                 ;	baud -> R16
                 ;	Int_type -> R17
0000f7 e0e0      	LDI  R30,LOW(0)
0000f8 93e0 009b 	STS  155,R30
0000fa e9e8      	LDI  R30,LOW(152)
0000fb 93e0 009a 	STS  154,R30
0000fd 2fe0      	MOV  R30,R16
0000fe e0f0      	LDI  R31,0
0000ff 9730      	SBIW R30,0
000100 f439      	BRNE _0x1B
000101 e0e0      	LDI  R30,LOW(0)
000102 93e0 0098 	STS  152,R30
000104 e5ef      	LDI  R30,LOW(95)
000105 93e0 0099 	STS  153,R30
000107 c00a      	RJMP _0x1A
                 _0x1B:
000108 30e1      	CPI  R30,LOW(0x1)
000109 e0a0      	LDI  R26,HIGH(0x1)
00010a 07fa      	CPC  R31,R26
00010b f431      	BRNE _0x1D
00010c e0e0      	LDI  R30,LOW(0)
00010d 93e0 0098 	STS  152,R30
00010f e0e7      	LDI  R30,LOW(7)
000110 93e0 0099 	STS  153,R30
                 _0x1D:
                 _0x1A:
000112 2fe1      	MOV  R30,R17
000113 e0f0      	LDI  R31,0
000114 9730      	SBIW R30,0
000115 f411      	BRNE _0x21
000116 e9e8      	LDI  R30,LOW(152)
000117 c00b      	RJMP _0x4C
                 _0x21:
000118 30e1      	CPI  R30,LOW(0x1)
000119 e0a0      	LDI  R26,HIGH(0x1)
00011a 07fa      	CPC  R31,R26
00011b f411      	BRNE _0x22
00011c e3e8      	LDI  R30,LOW(56)
00011d c005      	RJMP _0x4C
                 _0x22:
00011e 30e2      	CPI  R30,LOW(0x2)
00011f e0a0      	LDI  R26,HIGH(0x2)
000120 07fa      	CPC  R31,R26
000121 f419      	BRNE _0x20
000122 ebe8      	LDI  R30,LOW(184)
                 _0x4C:
000123 93e0 009a 	STS  154,R30
                 _0x20:
000125 e0e6      	LDI  R30,LOW(6)
000126 93e0 009d 	STS  157,R30
                 _0x2000001:
000128 8119      	LDD  R17,Y+1
000129 8108      	LDD  R16,Y+0
00012a 9623      	ADIW R28,3
00012b 9508      	RET
                 ; .FEND
                 ;	data -> R17
                 ;	*str -> R16,R17
                 
                 	.DSEG
                 ;interrupt [31] void usart1_receive(void)
                 ; 0000 0018 {
                 
                 	.CSEG
                 _usart1_receive:
                 ; .FSTART _usart1_receive
00012c 920a      	ST   -Y,R0
00012d 921a      	ST   -Y,R1
00012e 92fa      	ST   -Y,R15
00012f 936a      	ST   -Y,R22
000130 937a      	ST   -Y,R23
000131 938a      	ST   -Y,R24
000132 939a      	ST   -Y,R25
000133 93aa      	ST   -Y,R26
000134 93ba      	ST   -Y,R27
000135 93ea      	ST   -Y,R30
000136 93fa      	ST   -Y,R31
000137 b7ef      	IN   R30,SREG
000138 93ea      	ST   -Y,R30
                 ; 0000 0019 unsigned char i;
                 ; 0000 001A 
                 ; 0000 001B if(first_flag == 0) ch = 0;
000139 931a      	ST   -Y,R17
                 ;	i -> R17
00013a 2055      	TST  R5
00013b f409      	BRNE _0x2F
00013c 2466      	CLR  R6
                 ; 0000 001C str[ch] = UDR1;          //인터럽트 발생 시 수신된 문자를 str[ch]에 저장
                 _0x2F:
00013d 2da6      	MOV  R26,R6
00013e e0b0      	LDI  R27,0
00013f 5aa7      	SUBI R26,LOW(-_str)
000140 4fba      	SBCI R27,HIGH(-_str)
000141 91e0 009c 	LDS  R30,156
000143 93ec      	ST   X,R30
                 ; 0000 001D 
                 ; 0000 001E 
                 ; 0000 001F if(str[ch] == ENTER){
000144 2de6      	MOV  R30,R6
000145 e0f0      	LDI  R31,0
000146 5ae7      	SUBI R30,LOW(-_str)
000147 4ffa      	SBCI R31,HIGH(-_str)
000148 81a0      	LD   R26,Z
000149 30ad      	CPI  R26,LOW(0xD)
00014a f531      	BRNE _0x30
                 ; 0000 0020 for(i=0;i<MAXLEN;i++) str2[i] = 0;
00014b e010      	LDI  R17,LOW(0)
                 _0x32:
00014c 3111      	CPI  R17,17
00014d f440      	BRSH _0x33
00014e 2fe1      	MOV  R30,R17
00014f e0f0      	LDI  R31,0
000150 59e6      	SUBI R30,LOW(-_str2)
000151 4ffa      	SBCI R31,HIGH(-_str2)
000152 e0a0      	LDI  R26,LOW(0)
000153 83a0      	STD  Z+0,R26
000154 5f1f      	SUBI R17,-1
000155 cff6      	RJMP _0x32
                 _0x33:
                 ; 0000 0021 for(i=0;i<17;i++) str2[i] = str[i];
000156 e010      	LDI  R17,LOW(0)
                 _0x35:
000157 3111      	CPI  R17,17
000158 f448      	BRSH _0x36
000159 2fa1      	MOV  R26,R17
00015a e0b0      	LDI  R27,0
00015b 59a6      	SUBI R26,LOW(-_str2)
00015c 4fba      	SBCI R27,HIGH(-_str2)
00015d d09f      	RCALL SUBOPT_0x5
00015e 81e0      	LD   R30,Z
00015f 93ec      	ST   X,R30
000160 5f1f      	SUBI R17,-1
000161 cff5      	RJMP _0x35
                 _0x36:
                 ; 0000 0023 str[ch-1] = 0x00;
000162 2de6      	MOV  R30,R6
000163 e0f0      	LDI  R31,0
000164 9731      	SBIW R30,1
000165 5ae7      	SUBI R30,LOW(-_str)
000166 4ffa      	SBCI R31,HIGH(-_str)
000167 e0a0      	LDI  R26,LOW(0)
000168 83a0      	STD  Z+0,R26
                 ; 0000 0024 ch = 0;             //문자열 초기화
000169 2466      	CLR  R6
                 ; 0000 0025 key = 1;            //메인문에서 동작수행하게 하는 키
00016a e0e1      	LDI  R30,LOW(1)
00016b 2e7e      	MOV  R7,R30
                 ; 0000 0026 LCD_Pos(~pos,0);         //위치 변경
00016c 2de9      	MOV  R30,R9
00016d 95e0      	COM  R30
00016e 93ea      	ST   -Y,R30
00016f df53      	RCALL _LCD_Pos
                 ; 0000 0027 }
                 ; 0000 0028 else ch++;
000170 c001      	RJMP _0x37
                 _0x30:
000171 9463      	INC  R6
                 ; 0000 0029 delay_ms(10);
                 _0x37:
000172 e0aa      	LDI  R26,LOW(10)
000173 e0b0      	LDI  R27,0
000174 d096      	RCALL _delay_ms
                 ; 0000 002A 
                 ; 0000 002B 
                 ; 0000 002C if(first_flag > 0) {
000175 e0e0      	LDI  R30,LOW(0)
000176 15e5      	CP   R30,R5
000177 f418      	BRSH _0x38
                 ; 0000 002D LCD_Str(str); }        //LCD가 계속 표시되는걸 막게하기 위해 예제와 위치 변경
000178 e5a9      	LDI  R26,LOW(_str)
000179 e0b5      	LDI  R27,HIGH(_str)
00017a df59      	RCALL _LCD_Str
                 ; 0000 002E 
                 ; 0000 002F if ( ch >= MAXLEN) error_flag = 1;
                 _0x38:
00017b e1e1      	LDI  R30,LOW(17)
00017c 166e      	CP   R6,R30
00017d f010      	BRLO _0x39
00017e e0e1      	LDI  R30,LOW(1)
00017f 2e4e      	MOV  R4,R30
                 ; 0000 0030 
                 ; 0000 0031 }
                 _0x39:
000180 9119      	LD   R17,Y+
000181 91e9      	LD   R30,Y+
000182 bfef      	OUT  SREG,R30
000183 91f9      	LD   R31,Y+
000184 91e9      	LD   R30,Y+
000185 91b9      	LD   R27,Y+
000186 91a9      	LD   R26,Y+
000187 9199      	LD   R25,Y+
000188 9189      	LD   R24,Y+
000189 9179      	LD   R23,Y+
00018a 9169      	LD   R22,Y+
00018b 90f9      	LD   R15,Y+
00018c 9019      	LD   R1,Y+
00018d 9009      	LD   R0,Y+
00018e 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0037 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0038 
                 ; 0000 0039 unsigned char i;
                 ; 0000 003A LCD_Init();
                 ;	i -> R17
00018f df58      	RCALL _LCD_Init
                 ; 0000 003B Init_USART1_IntCon(0,RX_Int);
000190 e0e0      	LDI  R30,LOW(0)
000191 93ea      	ST   -Y,R30
000192 e0a0      	LDI  R26,LOW(0)
000193 df62      	RCALL _Init_USART1_IntCon
                 ; 0000 003C SREG |= 0x80;
000194 9478      	BSET 7
                 ; 0000 003D pos = 1;
000195 e0e1      	LDI  R30,LOW(1)
000196 2e9e      	MOV  R9,R30
                 ; 0000 003E ch = 0;
000197 2466      	CLR  R6
                 ; 0000 003F key = 0;
000198 2477      	CLR  R7
                 ; 0000 0040 
                 ; 0000 0041 LCD_Str(start_str);
000199 e7ab      	LDI  R26,LOW(_start_str)
00019a e0b5      	LDI  R27,HIGH(_start_str)
00019b df38      	RCALL _LCD_Str
                 ; 0000 0042 
                 ; 0000 0043 
                 ; 0000 0044 while (1)
                 _0x3A:
                 ; 0000 0045 {
                 ; 0000 0046 
                 ; 0000 0047 
                 ; 0000 0048 if(key == 1) {   //엔터키가 눌렸을때 동작
00019c e0e1      	LDI  R30,LOW(1)
00019d 15e7      	CP   R30,R7
00019e f4d1      	BRNE _0x3D
                 ; 0000 0049 
                 ; 0000 004A 
                 ; 0000 004B 
                 ; 0000 004C LCD_Pos(0,0);
00019f d062      	RCALL SUBOPT_0x6
                 ; 0000 004D LCD_Str("                ");
                +
0001a0 e1a5     +LDI R26 , LOW ( _0x3E + ( 0 ) )
0001a1 e0b5     +LDI R27 , HIGH ( _0x3E + ( 0 ) )
                 	__POINTW2MN _0x3E,0
0001a2 df31      	RCALL _LCD_Str
                 ; 0000 004E LCD_Pos(0,0);
0001a3 d05e      	RCALL SUBOPT_0x6
                 ; 0000 004F LCD_Str(str2);
0001a4 e6aa      	LDI  R26,LOW(_str2)
0001a5 e0b5      	LDI  R27,HIGH(_str2)
0001a6 d05f      	RCALL SUBOPT_0x7
                 ; 0000 0050 LCD_Pos(1,0);
                 ; 0000 0051 LCD_Str("                ");
                +
0001a7 e2a6     +LDI R26 , LOW ( _0x3E + ( 17 ) )
0001a8 e0b5     +LDI R27 , HIGH ( _0x3E + ( 17 ) )
                 	__POINTW2MN _0x3E,17
0001a9 df2a      	RCALL _LCD_Str
                 ; 0000 0052 LCD_Pos(0,0);
0001aa d057      	RCALL SUBOPT_0x6
                 ; 0000 0053 
                 ; 0000 0054 
                 ; 0000 0055 for(i=0;i<MAXLEN;i++) str[i] = 0;
0001ab e010      	LDI  R17,LOW(0)
                 _0x40:
0001ac 3111      	CPI  R17,17
0001ad f428      	BRSH _0x41
0001ae d04e      	RCALL SUBOPT_0x5
0001af e0a0      	LDI  R26,LOW(0)
0001b0 83a0      	STD  Z+0,R26
0001b1 5f1f      	SUBI R17,-1
0001b2 cff9      	RJMP _0x40
                 _0x41:
                 ; 0000 0056 key = 0;
0001b3 2477      	CLR  R7
                 ; 0000 0057 first_flag ++;
0001b4 9453      	INC  R5
                 ; 0000 0058 delay_ms(100);
0001b5 e6a4      	LDI  R26,LOW(100)
0001b6 e0b0      	LDI  R27,0
0001b7 d053      	RCALL _delay_ms
                 ; 0000 0059 
                 ; 0000 005A }
                 ; 0000 005B else{
0001b8 c008      	RJMP _0x42
                 _0x3D:
                 ; 0000 005C 
                 ; 0000 005D if(first_flag > 1) LCD_Pos(1,0) ;
0001b9 e0e1      	LDI  R30,LOW(1)
0001ba 15e5      	CP   R30,R5
0001bb f408      	BRSH _0x43
0001bc c001      	RJMP _0x4D
                 ; 0000 005E else LCD_Pos(0,0);
                 _0x43:
0001bd e0e0      	LDI  R30,LOW(0)
                 _0x4D:
0001be 93ea      	ST   -Y,R30
0001bf e0a0      	LDI  R26,LOW(0)
0001c0 df02      	RCALL _LCD_Pos
                 ; 0000 005F 
                 ; 0000 0060 }
                 _0x42:
                 ; 0000 0061 
                 ; 0000 0062 
                 ; 0000 0063 
                 ; 0000 0064 if( error_flag ){
0001c1 2044      	TST  R4
0001c2 f0a9      	BREQ _0x45
                 ; 0000 0065 for(i=0;i<MAXLEN;i++) str[i] = 0;
0001c3 e010      	LDI  R17,LOW(0)
                 _0x47:
0001c4 3111      	CPI  R17,17
0001c5 f428      	BRSH _0x48
0001c6 d036      	RCALL SUBOPT_0x5
0001c7 e0a0      	LDI  R26,LOW(0)
0001c8 83a0      	STD  Z+0,R26
0001c9 5f1f      	SUBI R17,-1
0001ca cff9      	RJMP _0x47
                 _0x48:
                 ; 0000 0066 LCD_Pos(0,0);
0001cb d036      	RCALL SUBOPT_0x6
                 ; 0000 0067 LCD_Str("                ");
                +
0001cc e3a7     +LDI R26 , LOW ( _0x3E + ( 34 ) )
0001cd e0b5     +LDI R27 , HIGH ( _0x3E + ( 34 ) )
                 	__POINTW2MN _0x3E,34
0001ce d037      	RCALL SUBOPT_0x7
                 ; 0000 0068 LCD_Pos(1,0);
                 ; 0000 0069 LCD_Str("                ");
                +
0001cf e4a8     +LDI R26 , LOW ( _0x3E + ( 51 ) )
0001d0 e0b5     +LDI R27 , HIGH ( _0x3E + ( 51 ) )
                 	__POINTW2MN _0x3E,51
0001d1 df02      	RCALL _LCD_Str
                 ; 0000 006A LCD_Pos(0,0);
0001d2 d02f      	RCALL SUBOPT_0x6
                 ; 0000 006B LCD_Str(error_message);
0001d3 e8ac      	LDI  R26,LOW(_error_message)
0001d4 e0b5      	LDI  R27,HIGH(_error_message)
0001d5 defe      	RCALL _LCD_Str
                 ; 0000 006C first_flag = 0;
0001d6 2455      	CLR  R5
                 ; 0000 006D error_flag = 0;
0001d7 2444      	CLR  R4
                 ; 0000 006E 
                 ; 0000 006F }
                 ; 0000 0070 
                 ; 0000 0071 }
                 _0x45:
0001d8 cfc3      	RJMP _0x3A
                 ; 0000 0072 }
                 _0x49:
0001d9 cfff      	RJMP _0x49
                 ; .FEND
                 
                 	.DSEG
                 _0x3E:
000515           	.BYTE 0x44
                 
                 	.DSEG
                 _str:
000559           	.BYTE 0x11
                 _str2:
00056a           	.BYTE 0x11
                 _start_str:
00057b           	.BYTE 0x11
                 _error_message:
00058c           	.BYTE 0x11
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001da 931a      	ST   -Y,R17
0001db 2f1a      	MOV  R17,R26
0001dc 91e0 0065 	LDS  R30,101
0001de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
0001df 93e0 0065 	STS  101,R30
0001e1 91e0 0065 	LDS  R30,101
0001e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x2:
0001e4 60e1      	ORI  R30,1
0001e5 93e0 0065 	STS  101,R30
                +
0001e7 ef86     +LDI R24 , LOW ( 246 )
                +__DELAY_USB_LOOP :
0001e8 958a     +DEC R24
0001e9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 246
0001ea bb1b      	OUT  0x1B,R17
                +
0001eb ef86     +LDI R24 , LOW ( 246 )
                +__DELAY_USB_LOOP :
0001ec 958a     +DEC R24
0001ed f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 246
0001ee 91e0 0065 	LDS  R30,101
0001f0 7fee      	ANDI R30,0xFE
0001f1 93e0 0065 	STS  101,R30
0001f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001f4 931a      	ST   -Y,R17
0001f5 930a      	ST   -Y,R16
0001f6 2f1a      	MOV  R17,R26
0001f7 810a      	LDD  R16,Y+2
0001f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0001f9 e3a8      	LDI  R26,LOW(56)
0001fa debd      	RCALL _LCD_Comm
0001fb e0a4      	LDI  R26,LOW(4)
0001fc cec2      	RJMP _LCD_delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0001fd 2fe1      	MOV  R30,R17
0001fe e0f0      	LDI  R31,0
0001ff 5ae7      	SUBI R30,LOW(-_str)
000200 4ffa      	SBCI R31,HIGH(-_str)
000201 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x6:
000202 e0e0      	LDI  R30,LOW(0)
000203 93ea      	ST   -Y,R30
000204 e0a0      	LDI  R26,LOW(0)
000205 cebd      	RJMP _LCD_Pos
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
000206 decd      	RCALL _LCD_Str
000207 e0e1      	LDI  R30,LOW(1)
000208 93ea      	ST   -Y,R30
000209 e0a0      	LDI  R26,LOW(0)
00020a ceb8      	RJMP _LCD_Pos
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 _delay_ms:
00020b 9610      	adiw r26,0
00020c f039      	breq __delay_ms1
                 __delay_ms0:
00020d 95a8      	wdr
                +
00020e e686     +LDI R24 , LOW ( 0xE66 )
00020f e09e     +LDI R25 , HIGH ( 0xE66 )
                +__DELAY_USW_LOOP :
000210 9701     +SBIW R24 , 1
000211 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xE66
000212 9711      	sbiw r26,1
000213 f7c9      	brne __delay_ms0
                 __delay_ms1:
000214 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :   7 r1 :   3 r2 :   0 r3 :   0 r4 :   3 r5 :   5 r6 :   8 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  10 r17:  33 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  16 r25:   5 r26:  60 r27:  21 r28:   2 r29:   1 r30: 105 r31:  18 
x  :   7 y  :  44 z  :  13 
Registers used: 23 out of 35 (65.7%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   2 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  15 brpl  :   0 brsh  :   6 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   1 bst   :   0 call  :   0 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   1 
cp    :   4 cpc   :   3 cpi   :   9 cpse  :   0 dec   :   3 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   1 inc   :   2 jmp   :  36 ld    :  20 ldd   :   3 
ldi   :  94 lds   :   4 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  17 
movw  :   6 mul   :   0 muls  :   1 mulsu :   0 neg   :   0 nop   :   0 
or    :   0 ori   :   3 out   :   9 pop   :   0 push  :   0 rcall :  49 
ret   :  12 reti  :   1 rjmp  :  21 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   7 sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   8 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  30 std   :   4 sts   :  13 sub   :   0 subi  :  11 
swap  :   0 tst   :   2 wdr   :   1 
Instructions used: 40 out of 117 (34.2%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00042a    960    106   1066  131072   0.8%
[.dseg] 0x000100 0x00059d      0    157    157    4096   3.8%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 6 warnings
